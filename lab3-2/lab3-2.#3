/*
Names: Ranjit Marathay, Jackie Sortor, Morgan Doyle
Section: 1B
Lab: Lab 3-2
Description: Smart car steering and motor speed
*/

#include <c8051_SDCC.h>
#include <stdio.h>
#include <stdlib.h>
#include <i2c.h>
//-----------------------------------------------------------------------------
// Function Prototypes
//-----------------------------------------------------------------------------
void Port_Init(void);
void PCA_Init (void);
void XBR0_Init();
unsigned int ReadCompass(void);
unsigned int ReadRanger(void);
void PCA_ISR ( void ) __interrupt 9;
void SMB_Init( void );

//-----------------------------------------------------------------------------
// Global Variables
//-----------------------------------------------------------------------------

unsigned int h_count;
unsigned char new_heading;
unsigned char heading;
unsigned int heading_;

unsigned int r_count;
unsigned int new_range;
unsigned int range;

unsigned int PW_CENTER = 2769;
unsigned int PW_m;

unsigned char addr;
unsigned char Data[2];

//-----------------------------------------------------------------------------
// Main Function
//-----------------------------------------------------------------------------
void main(void){
    // initialize board
    Sys_Init();
    putchar(' '); //the quotes in this line may not format correctly
    Port_Init();
    XBR0_Init();
    PCA_Init();

    //print beginning message
    printf("Embedded Control Steering Calibration\n");
    // set the PCA output to a neutral setting
    PW_m = PW_CENTER;
    PCA0CP0 = 0xFFFF - PW_m;


    while(1){
      printf("\rIn while loop\n");
      // if(new_heading){
      //   new_heading = 0;
      //   heading = ReadCompass();
      //   printf("\rDegress: %d\n", heading);
      // }
      if(new_range){
        printf("new_range\n");
        new_range = 0;
        range = ReadRanger();
        printf("\rRange: %d\n", range);
      }
    }
}

//
// Set up ports for input and output
//
void Port_Init(){
  P1MDOUT |= 0x01;
  P1MDOUT |= 0x04;
}

//
// Set up the crossbar
//
void XBR0_Init(){
  XBR0 = 0x27;  //configure crossbar as directed in the laboratory
  //Pin 12
}

//
// Set up Programmable Counter Array
//
void PCA_Init(void){
  PCA0CN |= 0x40;    /* Enable PCA counter */
  PCA0MD = 0x81;     /* SYSCLK/12, enable CF interrupts, suspend when idle */
  PCA0CPM0 = 0xC2;   /* CCM0 in 16-bit compare mode */
  PCA0CPM2 = 0XC2;
  EIE1 |= 0x08;
  EA = 1;
}

void SMB_Init(void){
  SMB0CR = 0x93;
  ENSMB = 1;
}

// Interrupt Service Routine for Programmable Counter Array Overflow Interrupt
//
void PCA_ISR ( void ) __interrupt 9{
    // reference to the sample code in Example 4.5 -Pulse Width Modulation
    // implemented using the PCA (Programmable Counter Array), p. 50 in Lab Manual.
    if(CF){
      CF = 0;
      h_count++;
      r_count++;
      if(h_count >= 3){
        new_heading = 1;
        h_count = 0;
      }
      if(r_count >= 4){
        new_range = 1;
        r_count = 0;
      }
      PCA0 = 28614;
    }
    PCA0CN &= 0xC0; //Handle other PCA interrupt sources
}

// unsigned int ReadCompass(){
//   printf("Inside Compass\n");
//   addr = 0xC0; // the address of the sensor, 0xC0 for the compass
//   heading_ = 0;
//   i2c_read_data(addr, 2, Data, 2);  // read two byte, starting at reg 2
//   heading_ =(((unsigned int)Data[0] << 8) | Data[1]);  //combine the two values
//   //                              //heading has units of 1/10 of a degree
//   printf("heading_: %d", heading_);
//   return heading_;             // the heading returned in degrees between 0 and 3599
// }
//
unsigned int ReadRanger(){
  // printf("Inside Ranger\n");
  // range = 0;
  // addr = 0xE0;		//the address of the ranger is 0xE0
  // i2c_read_data(addr, 2, Data, 2); // read two bytes starting at register 2
  // range = (((unsigned int)Data[0]<<8) | Data[1]);
  // return range;
  unsigned char Data[2];
  unsigned int range = 0;
  unsigned char addr=0xE0;// the address of the ranger is 0xE0 i2c_read_data(addr, __, Data, _); / / read two bytes, starting at reg 2 range = (((unsigned int)Data[0] << 8) | Data[1]);
  i2c_read_data(addr, __, Data, _); // read two bytes, starting at reg 2
  range = (((unsigned int)Data[0] << 8) | Data[1]);
  return range;
}
