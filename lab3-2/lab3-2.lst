                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module lab3_2
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _read_keypad
                                     13 	.globl _strlen
                                     14 	.globl _putchar
                                     15 	.globl _vsprintf
                                     16 	.globl _printf
                                     17 	.globl _getchar_nw
                                     18 	.globl _Sys_Init
                                     19 	.globl _UART0_Init
                                     20 	.globl _SYSCLK_Init
                                     21 	.globl _BUS_SCL
                                     22 	.globl _BUS_TOE
                                     23 	.globl _BUS_FTE
                                     24 	.globl _BUS_AA
                                     25 	.globl _BUS_INT
                                     26 	.globl _BUS_STOP
                                     27 	.globl _BUS_START
                                     28 	.globl _BUS_EN
                                     29 	.globl _BUS_BUSY
                                     30 	.globl _SPIF
                                     31 	.globl _WCOL
                                     32 	.globl _MODF
                                     33 	.globl _RXOVRN
                                     34 	.globl _TXBSY
                                     35 	.globl _SLVSEL
                                     36 	.globl _MSTEN
                                     37 	.globl _SPIEN
                                     38 	.globl _AD0EN
                                     39 	.globl _ADCEN
                                     40 	.globl _AD0TM
                                     41 	.globl _ADCTM
                                     42 	.globl _AD0INT
                                     43 	.globl _ADCINT
                                     44 	.globl _AD0BUSY
                                     45 	.globl _ADBUSY
                                     46 	.globl _AD0CM1
                                     47 	.globl _ADSTM1
                                     48 	.globl _AD0CM0
                                     49 	.globl _ADSTM0
                                     50 	.globl _AD0WINT
                                     51 	.globl _ADWINT
                                     52 	.globl _AD0LJST
                                     53 	.globl _ADLJST
                                     54 	.globl _CF
                                     55 	.globl _CR
                                     56 	.globl _CCF4
                                     57 	.globl _CCF3
                                     58 	.globl _CCF2
                                     59 	.globl _CCF1
                                     60 	.globl _CCF0
                                     61 	.globl _CY
                                     62 	.globl _AC
                                     63 	.globl _F0
                                     64 	.globl _RS1
                                     65 	.globl _RS0
                                     66 	.globl _OV
                                     67 	.globl _F1
                                     68 	.globl _P
                                     69 	.globl _TF2
                                     70 	.globl _EXF2
                                     71 	.globl _RCLK
                                     72 	.globl _TCLK
                                     73 	.globl _EXEN2
                                     74 	.globl _TR2
                                     75 	.globl _CT2
                                     76 	.globl _CPRL2
                                     77 	.globl _BUSY
                                     78 	.globl _ENSMB
                                     79 	.globl _STA
                                     80 	.globl _STO
                                     81 	.globl _SI
                                     82 	.globl _AA
                                     83 	.globl _SMBFTE
                                     84 	.globl _SMBTOE
                                     85 	.globl _PT2
                                     86 	.globl _PS
                                     87 	.globl _PS0
                                     88 	.globl _PT1
                                     89 	.globl _PX1
                                     90 	.globl _PT0
                                     91 	.globl _PX0
                                     92 	.globl _P3_7
                                     93 	.globl _P3_6
                                     94 	.globl _P3_5
                                     95 	.globl _P3_4
                                     96 	.globl _P3_3
                                     97 	.globl _P3_2
                                     98 	.globl _P3_1
                                     99 	.globl _P3_0
                                    100 	.globl _EA
                                    101 	.globl _ET2
                                    102 	.globl _ES
                                    103 	.globl _ES0
                                    104 	.globl _ET1
                                    105 	.globl _EX1
                                    106 	.globl _ET0
                                    107 	.globl _EX0
                                    108 	.globl _P2_7
                                    109 	.globl _P2_6
                                    110 	.globl _P2_5
                                    111 	.globl _P2_4
                                    112 	.globl _P2_3
                                    113 	.globl _P2_2
                                    114 	.globl _P2_1
                                    115 	.globl _P2_0
                                    116 	.globl _S0MODE
                                    117 	.globl _SM00
                                    118 	.globl _SM0
                                    119 	.globl _SM10
                                    120 	.globl _SM1
                                    121 	.globl _MCE0
                                    122 	.globl _SM20
                                    123 	.globl _SM2
                                    124 	.globl _REN0
                                    125 	.globl _REN
                                    126 	.globl _TB80
                                    127 	.globl _TB8
                                    128 	.globl _RB80
                                    129 	.globl _RB8
                                    130 	.globl _TI0
                                    131 	.globl _TI
                                    132 	.globl _RI0
                                    133 	.globl _RI
                                    134 	.globl _P1_7
                                    135 	.globl _P1_6
                                    136 	.globl _P1_5
                                    137 	.globl _P1_4
                                    138 	.globl _P1_3
                                    139 	.globl _P1_2
                                    140 	.globl _P1_1
                                    141 	.globl _P1_0
                                    142 	.globl _TF1
                                    143 	.globl _TR1
                                    144 	.globl _TF0
                                    145 	.globl _TR0
                                    146 	.globl _IE1
                                    147 	.globl _IT1
                                    148 	.globl _IE0
                                    149 	.globl _IT0
                                    150 	.globl _P0_7
                                    151 	.globl _P0_6
                                    152 	.globl _P0_5
                                    153 	.globl _P0_4
                                    154 	.globl _P0_3
                                    155 	.globl _P0_2
                                    156 	.globl _P0_1
                                    157 	.globl _P0_0
                                    158 	.globl _PCA0CP4
                                    159 	.globl _PCA0CP3
                                    160 	.globl _PCA0CP2
                                    161 	.globl _PCA0CP1
                                    162 	.globl _PCA0CP0
                                    163 	.globl _PCA0
                                    164 	.globl _DAC1
                                    165 	.globl _DAC0
                                    166 	.globl _ADC0LT
                                    167 	.globl _ADC0GT
                                    168 	.globl _ADC0
                                    169 	.globl _RCAP4
                                    170 	.globl _TMR4
                                    171 	.globl _TMR3RL
                                    172 	.globl _TMR3
                                    173 	.globl _RCAP2
                                    174 	.globl _TMR2
                                    175 	.globl _TMR1
                                    176 	.globl _TMR0
                                    177 	.globl _WDTCN
                                    178 	.globl _PCA0CPH4
                                    179 	.globl _PCA0CPH3
                                    180 	.globl _PCA0CPH2
                                    181 	.globl _PCA0CPH1
                                    182 	.globl _PCA0CPH0
                                    183 	.globl _PCA0H
                                    184 	.globl _SPI0CN
                                    185 	.globl _EIP2
                                    186 	.globl _EIP1
                                    187 	.globl _TH4
                                    188 	.globl _TL4
                                    189 	.globl _SADDR1
                                    190 	.globl _SBUF1
                                    191 	.globl _SCON1
                                    192 	.globl _B
                                    193 	.globl _RSTSRC
                                    194 	.globl _PCA0CPL4
                                    195 	.globl _PCA0CPL3
                                    196 	.globl _PCA0CPL2
                                    197 	.globl _PCA0CPL1
                                    198 	.globl _PCA0CPL0
                                    199 	.globl _PCA0L
                                    200 	.globl _ADC0CN
                                    201 	.globl _EIE2
                                    202 	.globl _EIE1
                                    203 	.globl _RCAP4H
                                    204 	.globl _RCAP4L
                                    205 	.globl _XBR2
                                    206 	.globl _XBR1
                                    207 	.globl _XBR0
                                    208 	.globl _ACC
                                    209 	.globl _PCA0CPM4
                                    210 	.globl _PCA0CPM3
                                    211 	.globl _PCA0CPM2
                                    212 	.globl _PCA0CPM1
                                    213 	.globl _PCA0CPM0
                                    214 	.globl _PCA0MD
                                    215 	.globl _PCA0CN
                                    216 	.globl _DAC1CN
                                    217 	.globl _DAC1H
                                    218 	.globl _DAC1L
                                    219 	.globl _DAC0CN
                                    220 	.globl _DAC0H
                                    221 	.globl _DAC0L
                                    222 	.globl _REF0CN
                                    223 	.globl _PSW
                                    224 	.globl _SMB0CR
                                    225 	.globl _TH2
                                    226 	.globl _TL2
                                    227 	.globl _RCAP2H
                                    228 	.globl _RCAP2L
                                    229 	.globl _T4CON
                                    230 	.globl _T2CON
                                    231 	.globl _ADC0LTH
                                    232 	.globl _ADC0LTL
                                    233 	.globl _ADC0GTH
                                    234 	.globl _ADC0GTL
                                    235 	.globl _SMB0ADR
                                    236 	.globl _SMB0DAT
                                    237 	.globl _SMB0STA
                                    238 	.globl _SMB0CN
                                    239 	.globl _ADC0H
                                    240 	.globl _ADC0L
                                    241 	.globl _P1MDIN
                                    242 	.globl _ADC0CF
                                    243 	.globl _AMX0SL
                                    244 	.globl _AMX0CF
                                    245 	.globl _SADEN0
                                    246 	.globl _IP
                                    247 	.globl _FLACL
                                    248 	.globl _FLSCL
                                    249 	.globl _P74OUT
                                    250 	.globl _OSCICN
                                    251 	.globl _OSCXCN
                                    252 	.globl _P3
                                    253 	.globl __XPAGE
                                    254 	.globl _EMI0CN
                                    255 	.globl _SADEN1
                                    256 	.globl _P3IF
                                    257 	.globl _AMX1SL
                                    258 	.globl _ADC1CF
                                    259 	.globl _ADC1CN
                                    260 	.globl _SADDR0
                                    261 	.globl _IE
                                    262 	.globl _P3MDOUT
                                    263 	.globl _PRT3CF
                                    264 	.globl _P2MDOUT
                                    265 	.globl _PRT2CF
                                    266 	.globl _P1MDOUT
                                    267 	.globl _PRT1CF
                                    268 	.globl _P0MDOUT
                                    269 	.globl _PRT0CF
                                    270 	.globl _EMI0CF
                                    271 	.globl _EMI0TC
                                    272 	.globl _P2
                                    273 	.globl _CPT1CN
                                    274 	.globl _CPT0CN
                                    275 	.globl _SPI0CKR
                                    276 	.globl _ADC1
                                    277 	.globl _SPI0DAT
                                    278 	.globl _SPI0CFG
                                    279 	.globl _SBUF0
                                    280 	.globl _SBUF
                                    281 	.globl _SCON0
                                    282 	.globl _SCON
                                    283 	.globl _P7
                                    284 	.globl _TMR3H
                                    285 	.globl _TMR3L
                                    286 	.globl _TMR3RLH
                                    287 	.globl _TMR3RLL
                                    288 	.globl _TMR3CN
                                    289 	.globl _P1
                                    290 	.globl _PSCTL
                                    291 	.globl _CKCON
                                    292 	.globl _TH1
                                    293 	.globl _TH0
                                    294 	.globl _TL1
                                    295 	.globl _TL0
                                    296 	.globl _TMOD
                                    297 	.globl _TCON
                                    298 	.globl _PCON
                                    299 	.globl _P6
                                    300 	.globl _P5
                                    301 	.globl _P4
                                    302 	.globl _DPH
                                    303 	.globl _DPL
                                    304 	.globl _SP
                                    305 	.globl _P0
                                    306 	.globl _Counts
                                    307 	.globl _Data
                                    308 	.globl _addr
                                    309 	.globl _PW_m
                                    310 	.globl _PW_CENTER
                                    311 	.globl _range
                                    312 	.globl _range_
                                    313 	.globl _new_range
                                    314 	.globl _r_count
                                    315 	.globl _heading_
                                    316 	.globl _heading
                                    317 	.globl _new_heading
                                    318 	.globl _h_count
                                    319 	.globl _i2c_read_data_PARM_4
                                    320 	.globl _i2c_read_data_PARM_3
                                    321 	.globl _i2c_read_data_PARM_2
                                    322 	.globl _i2c_write_data_PARM_4
                                    323 	.globl _i2c_write_data_PARM_3
                                    324 	.globl _i2c_write_data_PARM_2
                                    325 	.globl _aligned_alloc_PARM_2
                                    326 	.globl _Data2
                                    327 	.globl _lcd_print
                                    328 	.globl _lcd_clear
                                    329 	.globl _kpd_input
                                    330 	.globl _delay_time
                                    331 	.globl _i2c_start
                                    332 	.globl _i2c_write
                                    333 	.globl _i2c_write_and_stop
                                    334 	.globl _i2c_read
                                    335 	.globl _i2c_read_and_stop
                                    336 	.globl _i2c_write_data
                                    337 	.globl _i2c_read_data
                                    338 	.globl _Accel_Init
                                    339 	.globl _Accel_Init_C
                                    340 	.globl _Port_Init
                                    341 	.globl _XBR0_Init
                                    342 	.globl _PCA_Init
                                    343 	.globl _SMB_Init
                                    344 	.globl _PCA_ISR
                                    345 	.globl _startPing
                                    346 	.globl _wait
                                    347 	.globl _ReadCompass
                                    348 	.globl _ReadRanger
                                    349 ;--------------------------------------------------------
                                    350 ; special function registers
                                    351 ;--------------------------------------------------------
                                    352 	.area RSEG    (ABS,DATA)
      000000                        353 	.org 0x0000
                           000080   354 G$P0$0$0 == 0x0080
                           000080   355 _P0	=	0x0080
                           000081   356 G$SP$0$0 == 0x0081
                           000081   357 _SP	=	0x0081
                           000082   358 G$DPL$0$0 == 0x0082
                           000082   359 _DPL	=	0x0082
                           000083   360 G$DPH$0$0 == 0x0083
                           000083   361 _DPH	=	0x0083
                           000084   362 G$P4$0$0 == 0x0084
                           000084   363 _P4	=	0x0084
                           000085   364 G$P5$0$0 == 0x0085
                           000085   365 _P5	=	0x0085
                           000086   366 G$P6$0$0 == 0x0086
                           000086   367 _P6	=	0x0086
                           000087   368 G$PCON$0$0 == 0x0087
                           000087   369 _PCON	=	0x0087
                           000088   370 G$TCON$0$0 == 0x0088
                           000088   371 _TCON	=	0x0088
                           000089   372 G$TMOD$0$0 == 0x0089
                           000089   373 _TMOD	=	0x0089
                           00008A   374 G$TL0$0$0 == 0x008a
                           00008A   375 _TL0	=	0x008a
                           00008B   376 G$TL1$0$0 == 0x008b
                           00008B   377 _TL1	=	0x008b
                           00008C   378 G$TH0$0$0 == 0x008c
                           00008C   379 _TH0	=	0x008c
                           00008D   380 G$TH1$0$0 == 0x008d
                           00008D   381 _TH1	=	0x008d
                           00008E   382 G$CKCON$0$0 == 0x008e
                           00008E   383 _CKCON	=	0x008e
                           00008F   384 G$PSCTL$0$0 == 0x008f
                           00008F   385 _PSCTL	=	0x008f
                           000090   386 G$P1$0$0 == 0x0090
                           000090   387 _P1	=	0x0090
                           000091   388 G$TMR3CN$0$0 == 0x0091
                           000091   389 _TMR3CN	=	0x0091
                           000092   390 G$TMR3RLL$0$0 == 0x0092
                           000092   391 _TMR3RLL	=	0x0092
                           000093   392 G$TMR3RLH$0$0 == 0x0093
                           000093   393 _TMR3RLH	=	0x0093
                           000094   394 G$TMR3L$0$0 == 0x0094
                           000094   395 _TMR3L	=	0x0094
                           000095   396 G$TMR3H$0$0 == 0x0095
                           000095   397 _TMR3H	=	0x0095
                           000096   398 G$P7$0$0 == 0x0096
                           000096   399 _P7	=	0x0096
                           000098   400 G$SCON$0$0 == 0x0098
                           000098   401 _SCON	=	0x0098
                           000098   402 G$SCON0$0$0 == 0x0098
                           000098   403 _SCON0	=	0x0098
                           000099   404 G$SBUF$0$0 == 0x0099
                           000099   405 _SBUF	=	0x0099
                           000099   406 G$SBUF0$0$0 == 0x0099
                           000099   407 _SBUF0	=	0x0099
                           00009A   408 G$SPI0CFG$0$0 == 0x009a
                           00009A   409 _SPI0CFG	=	0x009a
                           00009B   410 G$SPI0DAT$0$0 == 0x009b
                           00009B   411 _SPI0DAT	=	0x009b
                           00009C   412 G$ADC1$0$0 == 0x009c
                           00009C   413 _ADC1	=	0x009c
                           00009D   414 G$SPI0CKR$0$0 == 0x009d
                           00009D   415 _SPI0CKR	=	0x009d
                           00009E   416 G$CPT0CN$0$0 == 0x009e
                           00009E   417 _CPT0CN	=	0x009e
                           00009F   418 G$CPT1CN$0$0 == 0x009f
                           00009F   419 _CPT1CN	=	0x009f
                           0000A0   420 G$P2$0$0 == 0x00a0
                           0000A0   421 _P2	=	0x00a0
                           0000A1   422 G$EMI0TC$0$0 == 0x00a1
                           0000A1   423 _EMI0TC	=	0x00a1
                           0000A3   424 G$EMI0CF$0$0 == 0x00a3
                           0000A3   425 _EMI0CF	=	0x00a3
                           0000A4   426 G$PRT0CF$0$0 == 0x00a4
                           0000A4   427 _PRT0CF	=	0x00a4
                           0000A4   428 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   429 _P0MDOUT	=	0x00a4
                           0000A5   430 G$PRT1CF$0$0 == 0x00a5
                           0000A5   431 _PRT1CF	=	0x00a5
                           0000A5   432 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   433 _P1MDOUT	=	0x00a5
                           0000A6   434 G$PRT2CF$0$0 == 0x00a6
                           0000A6   435 _PRT2CF	=	0x00a6
                           0000A6   436 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   437 _P2MDOUT	=	0x00a6
                           0000A7   438 G$PRT3CF$0$0 == 0x00a7
                           0000A7   439 _PRT3CF	=	0x00a7
                           0000A7   440 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   441 _P3MDOUT	=	0x00a7
                           0000A8   442 G$IE$0$0 == 0x00a8
                           0000A8   443 _IE	=	0x00a8
                           0000A9   444 G$SADDR0$0$0 == 0x00a9
                           0000A9   445 _SADDR0	=	0x00a9
                           0000AA   446 G$ADC1CN$0$0 == 0x00aa
                           0000AA   447 _ADC1CN	=	0x00aa
                           0000AB   448 G$ADC1CF$0$0 == 0x00ab
                           0000AB   449 _ADC1CF	=	0x00ab
                           0000AC   450 G$AMX1SL$0$0 == 0x00ac
                           0000AC   451 _AMX1SL	=	0x00ac
                           0000AD   452 G$P3IF$0$0 == 0x00ad
                           0000AD   453 _P3IF	=	0x00ad
                           0000AE   454 G$SADEN1$0$0 == 0x00ae
                           0000AE   455 _SADEN1	=	0x00ae
                           0000AF   456 G$EMI0CN$0$0 == 0x00af
                           0000AF   457 _EMI0CN	=	0x00af
                           0000AF   458 G$_XPAGE$0$0 == 0x00af
                           0000AF   459 __XPAGE	=	0x00af
                           0000B0   460 G$P3$0$0 == 0x00b0
                           0000B0   461 _P3	=	0x00b0
                           0000B1   462 G$OSCXCN$0$0 == 0x00b1
                           0000B1   463 _OSCXCN	=	0x00b1
                           0000B2   464 G$OSCICN$0$0 == 0x00b2
                           0000B2   465 _OSCICN	=	0x00b2
                           0000B5   466 G$P74OUT$0$0 == 0x00b5
                           0000B5   467 _P74OUT	=	0x00b5
                           0000B6   468 G$FLSCL$0$0 == 0x00b6
                           0000B6   469 _FLSCL	=	0x00b6
                           0000B7   470 G$FLACL$0$0 == 0x00b7
                           0000B7   471 _FLACL	=	0x00b7
                           0000B8   472 G$IP$0$0 == 0x00b8
                           0000B8   473 _IP	=	0x00b8
                           0000B9   474 G$SADEN0$0$0 == 0x00b9
                           0000B9   475 _SADEN0	=	0x00b9
                           0000BA   476 G$AMX0CF$0$0 == 0x00ba
                           0000BA   477 _AMX0CF	=	0x00ba
                           0000BB   478 G$AMX0SL$0$0 == 0x00bb
                           0000BB   479 _AMX0SL	=	0x00bb
                           0000BC   480 G$ADC0CF$0$0 == 0x00bc
                           0000BC   481 _ADC0CF	=	0x00bc
                           0000BD   482 G$P1MDIN$0$0 == 0x00bd
                           0000BD   483 _P1MDIN	=	0x00bd
                           0000BE   484 G$ADC0L$0$0 == 0x00be
                           0000BE   485 _ADC0L	=	0x00be
                           0000BF   486 G$ADC0H$0$0 == 0x00bf
                           0000BF   487 _ADC0H	=	0x00bf
                           0000C0   488 G$SMB0CN$0$0 == 0x00c0
                           0000C0   489 _SMB0CN	=	0x00c0
                           0000C1   490 G$SMB0STA$0$0 == 0x00c1
                           0000C1   491 _SMB0STA	=	0x00c1
                           0000C2   492 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   493 _SMB0DAT	=	0x00c2
                           0000C3   494 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   495 _SMB0ADR	=	0x00c3
                           0000C4   496 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   497 _ADC0GTL	=	0x00c4
                           0000C5   498 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   499 _ADC0GTH	=	0x00c5
                           0000C6   500 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   501 _ADC0LTL	=	0x00c6
                           0000C7   502 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   503 _ADC0LTH	=	0x00c7
                           0000C8   504 G$T2CON$0$0 == 0x00c8
                           0000C8   505 _T2CON	=	0x00c8
                           0000C9   506 G$T4CON$0$0 == 0x00c9
                           0000C9   507 _T4CON	=	0x00c9
                           0000CA   508 G$RCAP2L$0$0 == 0x00ca
                           0000CA   509 _RCAP2L	=	0x00ca
                           0000CB   510 G$RCAP2H$0$0 == 0x00cb
                           0000CB   511 _RCAP2H	=	0x00cb
                           0000CC   512 G$TL2$0$0 == 0x00cc
                           0000CC   513 _TL2	=	0x00cc
                           0000CD   514 G$TH2$0$0 == 0x00cd
                           0000CD   515 _TH2	=	0x00cd
                           0000CF   516 G$SMB0CR$0$0 == 0x00cf
                           0000CF   517 _SMB0CR	=	0x00cf
                           0000D0   518 G$PSW$0$0 == 0x00d0
                           0000D0   519 _PSW	=	0x00d0
                           0000D1   520 G$REF0CN$0$0 == 0x00d1
                           0000D1   521 _REF0CN	=	0x00d1
                           0000D2   522 G$DAC0L$0$0 == 0x00d2
                           0000D2   523 _DAC0L	=	0x00d2
                           0000D3   524 G$DAC0H$0$0 == 0x00d3
                           0000D3   525 _DAC0H	=	0x00d3
                           0000D4   526 G$DAC0CN$0$0 == 0x00d4
                           0000D4   527 _DAC0CN	=	0x00d4
                           0000D5   528 G$DAC1L$0$0 == 0x00d5
                           0000D5   529 _DAC1L	=	0x00d5
                           0000D6   530 G$DAC1H$0$0 == 0x00d6
                           0000D6   531 _DAC1H	=	0x00d6
                           0000D7   532 G$DAC1CN$0$0 == 0x00d7
                           0000D7   533 _DAC1CN	=	0x00d7
                           0000D8   534 G$PCA0CN$0$0 == 0x00d8
                           0000D8   535 _PCA0CN	=	0x00d8
                           0000D9   536 G$PCA0MD$0$0 == 0x00d9
                           0000D9   537 _PCA0MD	=	0x00d9
                           0000DA   538 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   539 _PCA0CPM0	=	0x00da
                           0000DB   540 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   541 _PCA0CPM1	=	0x00db
                           0000DC   542 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   543 _PCA0CPM2	=	0x00dc
                           0000DD   544 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   545 _PCA0CPM3	=	0x00dd
                           0000DE   546 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   547 _PCA0CPM4	=	0x00de
                           0000E0   548 G$ACC$0$0 == 0x00e0
                           0000E0   549 _ACC	=	0x00e0
                           0000E1   550 G$XBR0$0$0 == 0x00e1
                           0000E1   551 _XBR0	=	0x00e1
                           0000E2   552 G$XBR1$0$0 == 0x00e2
                           0000E2   553 _XBR1	=	0x00e2
                           0000E3   554 G$XBR2$0$0 == 0x00e3
                           0000E3   555 _XBR2	=	0x00e3
                           0000E4   556 G$RCAP4L$0$0 == 0x00e4
                           0000E4   557 _RCAP4L	=	0x00e4
                           0000E5   558 G$RCAP4H$0$0 == 0x00e5
                           0000E5   559 _RCAP4H	=	0x00e5
                           0000E6   560 G$EIE1$0$0 == 0x00e6
                           0000E6   561 _EIE1	=	0x00e6
                           0000E7   562 G$EIE2$0$0 == 0x00e7
                           0000E7   563 _EIE2	=	0x00e7
                           0000E8   564 G$ADC0CN$0$0 == 0x00e8
                           0000E8   565 _ADC0CN	=	0x00e8
                           0000E9   566 G$PCA0L$0$0 == 0x00e9
                           0000E9   567 _PCA0L	=	0x00e9
                           0000EA   568 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   569 _PCA0CPL0	=	0x00ea
                           0000EB   570 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   571 _PCA0CPL1	=	0x00eb
                           0000EC   572 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   573 _PCA0CPL2	=	0x00ec
                           0000ED   574 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   575 _PCA0CPL3	=	0x00ed
                           0000EE   576 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   577 _PCA0CPL4	=	0x00ee
                           0000EF   578 G$RSTSRC$0$0 == 0x00ef
                           0000EF   579 _RSTSRC	=	0x00ef
                           0000F0   580 G$B$0$0 == 0x00f0
                           0000F0   581 _B	=	0x00f0
                           0000F1   582 G$SCON1$0$0 == 0x00f1
                           0000F1   583 _SCON1	=	0x00f1
                           0000F2   584 G$SBUF1$0$0 == 0x00f2
                           0000F2   585 _SBUF1	=	0x00f2
                           0000F3   586 G$SADDR1$0$0 == 0x00f3
                           0000F3   587 _SADDR1	=	0x00f3
                           0000F4   588 G$TL4$0$0 == 0x00f4
                           0000F4   589 _TL4	=	0x00f4
                           0000F5   590 G$TH4$0$0 == 0x00f5
                           0000F5   591 _TH4	=	0x00f5
                           0000F6   592 G$EIP1$0$0 == 0x00f6
                           0000F6   593 _EIP1	=	0x00f6
                           0000F7   594 G$EIP2$0$0 == 0x00f7
                           0000F7   595 _EIP2	=	0x00f7
                           0000F8   596 G$SPI0CN$0$0 == 0x00f8
                           0000F8   597 _SPI0CN	=	0x00f8
                           0000F9   598 G$PCA0H$0$0 == 0x00f9
                           0000F9   599 _PCA0H	=	0x00f9
                           0000FA   600 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   601 _PCA0CPH0	=	0x00fa
                           0000FB   602 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   603 _PCA0CPH1	=	0x00fb
                           0000FC   604 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   605 _PCA0CPH2	=	0x00fc
                           0000FD   606 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   607 _PCA0CPH3	=	0x00fd
                           0000FE   608 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   609 _PCA0CPH4	=	0x00fe
                           0000FF   610 G$WDTCN$0$0 == 0x00ff
                           0000FF   611 _WDTCN	=	0x00ff
                           008C8A   612 G$TMR0$0$0 == 0x8c8a
                           008C8A   613 _TMR0	=	0x8c8a
                           008D8B   614 G$TMR1$0$0 == 0x8d8b
                           008D8B   615 _TMR1	=	0x8d8b
                           00CDCC   616 G$TMR2$0$0 == 0xcdcc
                           00CDCC   617 _TMR2	=	0xcdcc
                           00CBCA   618 G$RCAP2$0$0 == 0xcbca
                           00CBCA   619 _RCAP2	=	0xcbca
                           009594   620 G$TMR3$0$0 == 0x9594
                           009594   621 _TMR3	=	0x9594
                           009392   622 G$TMR3RL$0$0 == 0x9392
                           009392   623 _TMR3RL	=	0x9392
                           00F5F4   624 G$TMR4$0$0 == 0xf5f4
                           00F5F4   625 _TMR4	=	0xf5f4
                           00E5E4   626 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   627 _RCAP4	=	0xe5e4
                           00BFBE   628 G$ADC0$0$0 == 0xbfbe
                           00BFBE   629 _ADC0	=	0xbfbe
                           00C5C4   630 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   631 _ADC0GT	=	0xc5c4
                           00C7C6   632 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   633 _ADC0LT	=	0xc7c6
                           00D3D2   634 G$DAC0$0$0 == 0xd3d2
                           00D3D2   635 _DAC0	=	0xd3d2
                           00D6D5   636 G$DAC1$0$0 == 0xd6d5
                           00D6D5   637 _DAC1	=	0xd6d5
                           00F9E9   638 G$PCA0$0$0 == 0xf9e9
                           00F9E9   639 _PCA0	=	0xf9e9
                           00FAEA   640 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   641 _PCA0CP0	=	0xfaea
                           00FBEB   642 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   643 _PCA0CP1	=	0xfbeb
                           00FCEC   644 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   645 _PCA0CP2	=	0xfcec
                           00FDED   646 G$PCA0CP3$0$0 == 0xfded
                           00FDED   647 _PCA0CP3	=	0xfded
                           00FEEE   648 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   649 _PCA0CP4	=	0xfeee
                                    650 ;--------------------------------------------------------
                                    651 ; special function bits
                                    652 ;--------------------------------------------------------
                                    653 	.area RSEG    (ABS,DATA)
      000000                        654 	.org 0x0000
                           000080   655 G$P0_0$0$0 == 0x0080
                           000080   656 _P0_0	=	0x0080
                           000081   657 G$P0_1$0$0 == 0x0081
                           000081   658 _P0_1	=	0x0081
                           000082   659 G$P0_2$0$0 == 0x0082
                           000082   660 _P0_2	=	0x0082
                           000083   661 G$P0_3$0$0 == 0x0083
                           000083   662 _P0_3	=	0x0083
                           000084   663 G$P0_4$0$0 == 0x0084
                           000084   664 _P0_4	=	0x0084
                           000085   665 G$P0_5$0$0 == 0x0085
                           000085   666 _P0_5	=	0x0085
                           000086   667 G$P0_6$0$0 == 0x0086
                           000086   668 _P0_6	=	0x0086
                           000087   669 G$P0_7$0$0 == 0x0087
                           000087   670 _P0_7	=	0x0087
                           000088   671 G$IT0$0$0 == 0x0088
                           000088   672 _IT0	=	0x0088
                           000089   673 G$IE0$0$0 == 0x0089
                           000089   674 _IE0	=	0x0089
                           00008A   675 G$IT1$0$0 == 0x008a
                           00008A   676 _IT1	=	0x008a
                           00008B   677 G$IE1$0$0 == 0x008b
                           00008B   678 _IE1	=	0x008b
                           00008C   679 G$TR0$0$0 == 0x008c
                           00008C   680 _TR0	=	0x008c
                           00008D   681 G$TF0$0$0 == 0x008d
                           00008D   682 _TF0	=	0x008d
                           00008E   683 G$TR1$0$0 == 0x008e
                           00008E   684 _TR1	=	0x008e
                           00008F   685 G$TF1$0$0 == 0x008f
                           00008F   686 _TF1	=	0x008f
                           000090   687 G$P1_0$0$0 == 0x0090
                           000090   688 _P1_0	=	0x0090
                           000091   689 G$P1_1$0$0 == 0x0091
                           000091   690 _P1_1	=	0x0091
                           000092   691 G$P1_2$0$0 == 0x0092
                           000092   692 _P1_2	=	0x0092
                           000093   693 G$P1_3$0$0 == 0x0093
                           000093   694 _P1_3	=	0x0093
                           000094   695 G$P1_4$0$0 == 0x0094
                           000094   696 _P1_4	=	0x0094
                           000095   697 G$P1_5$0$0 == 0x0095
                           000095   698 _P1_5	=	0x0095
                           000096   699 G$P1_6$0$0 == 0x0096
                           000096   700 _P1_6	=	0x0096
                           000097   701 G$P1_7$0$0 == 0x0097
                           000097   702 _P1_7	=	0x0097
                           000098   703 G$RI$0$0 == 0x0098
                           000098   704 _RI	=	0x0098
                           000098   705 G$RI0$0$0 == 0x0098
                           000098   706 _RI0	=	0x0098
                           000099   707 G$TI$0$0 == 0x0099
                           000099   708 _TI	=	0x0099
                           000099   709 G$TI0$0$0 == 0x0099
                           000099   710 _TI0	=	0x0099
                           00009A   711 G$RB8$0$0 == 0x009a
                           00009A   712 _RB8	=	0x009a
                           00009A   713 G$RB80$0$0 == 0x009a
                           00009A   714 _RB80	=	0x009a
                           00009B   715 G$TB8$0$0 == 0x009b
                           00009B   716 _TB8	=	0x009b
                           00009B   717 G$TB80$0$0 == 0x009b
                           00009B   718 _TB80	=	0x009b
                           00009C   719 G$REN$0$0 == 0x009c
                           00009C   720 _REN	=	0x009c
                           00009C   721 G$REN0$0$0 == 0x009c
                           00009C   722 _REN0	=	0x009c
                           00009D   723 G$SM2$0$0 == 0x009d
                           00009D   724 _SM2	=	0x009d
                           00009D   725 G$SM20$0$0 == 0x009d
                           00009D   726 _SM20	=	0x009d
                           00009D   727 G$MCE0$0$0 == 0x009d
                           00009D   728 _MCE0	=	0x009d
                           00009E   729 G$SM1$0$0 == 0x009e
                           00009E   730 _SM1	=	0x009e
                           00009E   731 G$SM10$0$0 == 0x009e
                           00009E   732 _SM10	=	0x009e
                           00009F   733 G$SM0$0$0 == 0x009f
                           00009F   734 _SM0	=	0x009f
                           00009F   735 G$SM00$0$0 == 0x009f
                           00009F   736 _SM00	=	0x009f
                           00009F   737 G$S0MODE$0$0 == 0x009f
                           00009F   738 _S0MODE	=	0x009f
                           0000A0   739 G$P2_0$0$0 == 0x00a0
                           0000A0   740 _P2_0	=	0x00a0
                           0000A1   741 G$P2_1$0$0 == 0x00a1
                           0000A1   742 _P2_1	=	0x00a1
                           0000A2   743 G$P2_2$0$0 == 0x00a2
                           0000A2   744 _P2_2	=	0x00a2
                           0000A3   745 G$P2_3$0$0 == 0x00a3
                           0000A3   746 _P2_3	=	0x00a3
                           0000A4   747 G$P2_4$0$0 == 0x00a4
                           0000A4   748 _P2_4	=	0x00a4
                           0000A5   749 G$P2_5$0$0 == 0x00a5
                           0000A5   750 _P2_5	=	0x00a5
                           0000A6   751 G$P2_6$0$0 == 0x00a6
                           0000A6   752 _P2_6	=	0x00a6
                           0000A7   753 G$P2_7$0$0 == 0x00a7
                           0000A7   754 _P2_7	=	0x00a7
                           0000A8   755 G$EX0$0$0 == 0x00a8
                           0000A8   756 _EX0	=	0x00a8
                           0000A9   757 G$ET0$0$0 == 0x00a9
                           0000A9   758 _ET0	=	0x00a9
                           0000AA   759 G$EX1$0$0 == 0x00aa
                           0000AA   760 _EX1	=	0x00aa
                           0000AB   761 G$ET1$0$0 == 0x00ab
                           0000AB   762 _ET1	=	0x00ab
                           0000AC   763 G$ES0$0$0 == 0x00ac
                           0000AC   764 _ES0	=	0x00ac
                           0000AC   765 G$ES$0$0 == 0x00ac
                           0000AC   766 _ES	=	0x00ac
                           0000AD   767 G$ET2$0$0 == 0x00ad
                           0000AD   768 _ET2	=	0x00ad
                           0000AF   769 G$EA$0$0 == 0x00af
                           0000AF   770 _EA	=	0x00af
                           0000B0   771 G$P3_0$0$0 == 0x00b0
                           0000B0   772 _P3_0	=	0x00b0
                           0000B1   773 G$P3_1$0$0 == 0x00b1
                           0000B1   774 _P3_1	=	0x00b1
                           0000B2   775 G$P3_2$0$0 == 0x00b2
                           0000B2   776 _P3_2	=	0x00b2
                           0000B3   777 G$P3_3$0$0 == 0x00b3
                           0000B3   778 _P3_3	=	0x00b3
                           0000B4   779 G$P3_4$0$0 == 0x00b4
                           0000B4   780 _P3_4	=	0x00b4
                           0000B5   781 G$P3_5$0$0 == 0x00b5
                           0000B5   782 _P3_5	=	0x00b5
                           0000B6   783 G$P3_6$0$0 == 0x00b6
                           0000B6   784 _P3_6	=	0x00b6
                           0000B7   785 G$P3_7$0$0 == 0x00b7
                           0000B7   786 _P3_7	=	0x00b7
                           0000B8   787 G$PX0$0$0 == 0x00b8
                           0000B8   788 _PX0	=	0x00b8
                           0000B9   789 G$PT0$0$0 == 0x00b9
                           0000B9   790 _PT0	=	0x00b9
                           0000BA   791 G$PX1$0$0 == 0x00ba
                           0000BA   792 _PX1	=	0x00ba
                           0000BB   793 G$PT1$0$0 == 0x00bb
                           0000BB   794 _PT1	=	0x00bb
                           0000BC   795 G$PS0$0$0 == 0x00bc
                           0000BC   796 _PS0	=	0x00bc
                           0000BC   797 G$PS$0$0 == 0x00bc
                           0000BC   798 _PS	=	0x00bc
                           0000BD   799 G$PT2$0$0 == 0x00bd
                           0000BD   800 _PT2	=	0x00bd
                           0000C0   801 G$SMBTOE$0$0 == 0x00c0
                           0000C0   802 _SMBTOE	=	0x00c0
                           0000C1   803 G$SMBFTE$0$0 == 0x00c1
                           0000C1   804 _SMBFTE	=	0x00c1
                           0000C2   805 G$AA$0$0 == 0x00c2
                           0000C2   806 _AA	=	0x00c2
                           0000C3   807 G$SI$0$0 == 0x00c3
                           0000C3   808 _SI	=	0x00c3
                           0000C4   809 G$STO$0$0 == 0x00c4
                           0000C4   810 _STO	=	0x00c4
                           0000C5   811 G$STA$0$0 == 0x00c5
                           0000C5   812 _STA	=	0x00c5
                           0000C6   813 G$ENSMB$0$0 == 0x00c6
                           0000C6   814 _ENSMB	=	0x00c6
                           0000C7   815 G$BUSY$0$0 == 0x00c7
                           0000C7   816 _BUSY	=	0x00c7
                           0000C8   817 G$CPRL2$0$0 == 0x00c8
                           0000C8   818 _CPRL2	=	0x00c8
                           0000C9   819 G$CT2$0$0 == 0x00c9
                           0000C9   820 _CT2	=	0x00c9
                           0000CA   821 G$TR2$0$0 == 0x00ca
                           0000CA   822 _TR2	=	0x00ca
                           0000CB   823 G$EXEN2$0$0 == 0x00cb
                           0000CB   824 _EXEN2	=	0x00cb
                           0000CC   825 G$TCLK$0$0 == 0x00cc
                           0000CC   826 _TCLK	=	0x00cc
                           0000CD   827 G$RCLK$0$0 == 0x00cd
                           0000CD   828 _RCLK	=	0x00cd
                           0000CE   829 G$EXF2$0$0 == 0x00ce
                           0000CE   830 _EXF2	=	0x00ce
                           0000CF   831 G$TF2$0$0 == 0x00cf
                           0000CF   832 _TF2	=	0x00cf
                           0000D0   833 G$P$0$0 == 0x00d0
                           0000D0   834 _P	=	0x00d0
                           0000D1   835 G$F1$0$0 == 0x00d1
                           0000D1   836 _F1	=	0x00d1
                           0000D2   837 G$OV$0$0 == 0x00d2
                           0000D2   838 _OV	=	0x00d2
                           0000D3   839 G$RS0$0$0 == 0x00d3
                           0000D3   840 _RS0	=	0x00d3
                           0000D4   841 G$RS1$0$0 == 0x00d4
                           0000D4   842 _RS1	=	0x00d4
                           0000D5   843 G$F0$0$0 == 0x00d5
                           0000D5   844 _F0	=	0x00d5
                           0000D6   845 G$AC$0$0 == 0x00d6
                           0000D6   846 _AC	=	0x00d6
                           0000D7   847 G$CY$0$0 == 0x00d7
                           0000D7   848 _CY	=	0x00d7
                           0000D8   849 G$CCF0$0$0 == 0x00d8
                           0000D8   850 _CCF0	=	0x00d8
                           0000D9   851 G$CCF1$0$0 == 0x00d9
                           0000D9   852 _CCF1	=	0x00d9
                           0000DA   853 G$CCF2$0$0 == 0x00da
                           0000DA   854 _CCF2	=	0x00da
                           0000DB   855 G$CCF3$0$0 == 0x00db
                           0000DB   856 _CCF3	=	0x00db
                           0000DC   857 G$CCF4$0$0 == 0x00dc
                           0000DC   858 _CCF4	=	0x00dc
                           0000DE   859 G$CR$0$0 == 0x00de
                           0000DE   860 _CR	=	0x00de
                           0000DF   861 G$CF$0$0 == 0x00df
                           0000DF   862 _CF	=	0x00df
                           0000E8   863 G$ADLJST$0$0 == 0x00e8
                           0000E8   864 _ADLJST	=	0x00e8
                           0000E8   865 G$AD0LJST$0$0 == 0x00e8
                           0000E8   866 _AD0LJST	=	0x00e8
                           0000E9   867 G$ADWINT$0$0 == 0x00e9
                           0000E9   868 _ADWINT	=	0x00e9
                           0000E9   869 G$AD0WINT$0$0 == 0x00e9
                           0000E9   870 _AD0WINT	=	0x00e9
                           0000EA   871 G$ADSTM0$0$0 == 0x00ea
                           0000EA   872 _ADSTM0	=	0x00ea
                           0000EA   873 G$AD0CM0$0$0 == 0x00ea
                           0000EA   874 _AD0CM0	=	0x00ea
                           0000EB   875 G$ADSTM1$0$0 == 0x00eb
                           0000EB   876 _ADSTM1	=	0x00eb
                           0000EB   877 G$AD0CM1$0$0 == 0x00eb
                           0000EB   878 _AD0CM1	=	0x00eb
                           0000EC   879 G$ADBUSY$0$0 == 0x00ec
                           0000EC   880 _ADBUSY	=	0x00ec
                           0000EC   881 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   882 _AD0BUSY	=	0x00ec
                           0000ED   883 G$ADCINT$0$0 == 0x00ed
                           0000ED   884 _ADCINT	=	0x00ed
                           0000ED   885 G$AD0INT$0$0 == 0x00ed
                           0000ED   886 _AD0INT	=	0x00ed
                           0000EE   887 G$ADCTM$0$0 == 0x00ee
                           0000EE   888 _ADCTM	=	0x00ee
                           0000EE   889 G$AD0TM$0$0 == 0x00ee
                           0000EE   890 _AD0TM	=	0x00ee
                           0000EF   891 G$ADCEN$0$0 == 0x00ef
                           0000EF   892 _ADCEN	=	0x00ef
                           0000EF   893 G$AD0EN$0$0 == 0x00ef
                           0000EF   894 _AD0EN	=	0x00ef
                           0000F8   895 G$SPIEN$0$0 == 0x00f8
                           0000F8   896 _SPIEN	=	0x00f8
                           0000F9   897 G$MSTEN$0$0 == 0x00f9
                           0000F9   898 _MSTEN	=	0x00f9
                           0000FA   899 G$SLVSEL$0$0 == 0x00fa
                           0000FA   900 _SLVSEL	=	0x00fa
                           0000FB   901 G$TXBSY$0$0 == 0x00fb
                           0000FB   902 _TXBSY	=	0x00fb
                           0000FC   903 G$RXOVRN$0$0 == 0x00fc
                           0000FC   904 _RXOVRN	=	0x00fc
                           0000FD   905 G$MODF$0$0 == 0x00fd
                           0000FD   906 _MODF	=	0x00fd
                           0000FE   907 G$WCOL$0$0 == 0x00fe
                           0000FE   908 _WCOL	=	0x00fe
                           0000FF   909 G$SPIF$0$0 == 0x00ff
                           0000FF   910 _SPIF	=	0x00ff
                           0000C7   911 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   912 _BUS_BUSY	=	0x00c7
                           0000C6   913 G$BUS_EN$0$0 == 0x00c6
                           0000C6   914 _BUS_EN	=	0x00c6
                           0000C5   915 G$BUS_START$0$0 == 0x00c5
                           0000C5   916 _BUS_START	=	0x00c5
                           0000C4   917 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   918 _BUS_STOP	=	0x00c4
                           0000C3   919 G$BUS_INT$0$0 == 0x00c3
                           0000C3   920 _BUS_INT	=	0x00c3
                           0000C2   921 G$BUS_AA$0$0 == 0x00c2
                           0000C2   922 _BUS_AA	=	0x00c2
                           0000C1   923 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   924 _BUS_FTE	=	0x00c1
                           0000C0   925 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   926 _BUS_TOE	=	0x00c0
                           000083   927 G$BUS_SCL$0$0 == 0x0083
                           000083   928 _BUS_SCL	=	0x0083
                                    929 ;--------------------------------------------------------
                                    930 ; overlayable register banks
                                    931 ;--------------------------------------------------------
                                    932 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        933 	.ds 8
                                    934 ;--------------------------------------------------------
                                    935 ; internal ram data
                                    936 ;--------------------------------------------------------
                                    937 	.area DSEG    (DATA)
                           000000   938 G$Data2$0$0==.
      000000                        939 _Data2::
      000000                        940 	.ds 3
                           000003   941 Llab3_2.aligned_alloc$size$1$39==.
      000003                        942 _aligned_alloc_PARM_2:
      000003                        943 	.ds 2
                           000005   944 Llab3_2.lcd_clear$NumBytes$1$85==.
      000005                        945 _lcd_clear_NumBytes_1_85:
      000005                        946 	.ds 1
                           000006   947 Llab3_2.lcd_clear$Cmd$1$85==.
      000006                        948 _lcd_clear_Cmd_1_85:
      000006                        949 	.ds 2
                           000008   950 Llab3_2.read_keypad$Data$1$86==.
      000008                        951 _read_keypad_Data_1_86:
      000008                        952 	.ds 2
                           00000A   953 Llab3_2.i2c_write_data$start_reg$1$105==.
      00000A                        954 _i2c_write_data_PARM_2:
      00000A                        955 	.ds 1
                           00000B   956 Llab3_2.i2c_write_data$buffer$1$105==.
      00000B                        957 _i2c_write_data_PARM_3:
      00000B                        958 	.ds 3
                           00000E   959 Llab3_2.i2c_write_data$num_bytes$1$105==.
      00000E                        960 _i2c_write_data_PARM_4:
      00000E                        961 	.ds 1
                           00000F   962 Llab3_2.i2c_read_data$start_reg$1$107==.
      00000F                        963 _i2c_read_data_PARM_2:
      00000F                        964 	.ds 1
                           000010   965 Llab3_2.i2c_read_data$buffer$1$107==.
      000010                        966 _i2c_read_data_PARM_3:
      000010                        967 	.ds 3
                           000013   968 Llab3_2.i2c_read_data$num_bytes$1$107==.
      000013                        969 _i2c_read_data_PARM_4:
      000013                        970 	.ds 1
                           000014   971 G$h_count$0$0==.
      000014                        972 _h_count::
      000014                        973 	.ds 2
                           000016   974 G$new_heading$0$0==.
      000016                        975 _new_heading::
      000016                        976 	.ds 1
                           000017   977 G$heading$0$0==.
      000017                        978 _heading::
      000017                        979 	.ds 2
                           000019   980 G$heading_$0$0==.
      000019                        981 _heading_::
      000019                        982 	.ds 2
                           00001B   983 G$r_count$0$0==.
      00001B                        984 _r_count::
      00001B                        985 	.ds 2
                           00001D   986 G$new_range$0$0==.
      00001D                        987 _new_range::
      00001D                        988 	.ds 2
                           00001F   989 G$range_$0$0==.
      00001F                        990 _range_::
      00001F                        991 	.ds 2
                           000021   992 G$range$0$0==.
      000021                        993 _range::
      000021                        994 	.ds 2
                           000023   995 G$PW_CENTER$0$0==.
      000023                        996 _PW_CENTER::
      000023                        997 	.ds 2
                           000025   998 G$PW_m$0$0==.
      000025                        999 _PW_m::
      000025                       1000 	.ds 2
                           000027  1001 G$addr$0$0==.
      000027                       1002 _addr::
      000027                       1003 	.ds 1
                           000028  1004 G$Data$0$0==.
      000028                       1005 _Data::
      000028                       1006 	.ds 2
                           00002A  1007 G$Counts$0$0==.
      00002A                       1008 _Counts::
      00002A                       1009 	.ds 2
                           00002C  1010 Llab3_2.ReadRanger$Data$1$143==.
      00002C                       1011 _ReadRanger_Data_1_143:
      00002C                       1012 	.ds 2
                                   1013 ;--------------------------------------------------------
                                   1014 ; overlayable items in internal ram 
                                   1015 ;--------------------------------------------------------
                                   1016 	.area	OSEG    (OVR,DATA)
                                   1017 	.area	OSEG    (OVR,DATA)
                                   1018 	.area	OSEG    (OVR,DATA)
                                   1019 	.area	OSEG    (OVR,DATA)
                                   1020 	.area	OSEG    (OVR,DATA)
                                   1021 	.area	OSEG    (OVR,DATA)
                                   1022 	.area	OSEG    (OVR,DATA)
                                   1023 ;--------------------------------------------------------
                                   1024 ; Stack segment in internal ram 
                                   1025 ;--------------------------------------------------------
                                   1026 	.area	SSEG
      000000                       1027 __start__stack:
      000000                       1028 	.ds	1
                                   1029 
                                   1030 ;--------------------------------------------------------
                                   1031 ; indirectly addressable internal ram data
                                   1032 ;--------------------------------------------------------
                                   1033 	.area ISEG    (DATA)
                                   1034 ;--------------------------------------------------------
                                   1035 ; absolute internal ram data
                                   1036 ;--------------------------------------------------------
                                   1037 	.area IABS    (ABS,DATA)
                                   1038 	.area IABS    (ABS,DATA)
                                   1039 ;--------------------------------------------------------
                                   1040 ; bit data
                                   1041 ;--------------------------------------------------------
                                   1042 	.area BSEG    (BIT)
                                   1043 ;--------------------------------------------------------
                                   1044 ; paged external ram data
                                   1045 ;--------------------------------------------------------
                                   1046 	.area PSEG    (PAG,XDATA)
                                   1047 ;--------------------------------------------------------
                                   1048 ; external ram data
                                   1049 ;--------------------------------------------------------
                                   1050 	.area XSEG    (XDATA)
                           000000  1051 Llab3_2.lcd_print$text$1$81==.
      000000                       1052 _lcd_print_text_1_81:
      000000                       1053 	.ds 80
                                   1054 ;--------------------------------------------------------
                                   1055 ; absolute external ram data
                                   1056 ;--------------------------------------------------------
                                   1057 	.area XABS    (ABS,XDATA)
                                   1058 ;--------------------------------------------------------
                                   1059 ; external initialized ram data
                                   1060 ;--------------------------------------------------------
                                   1061 	.area XISEG   (XDATA)
                                   1062 	.area HOME    (CODE)
                                   1063 	.area GSINIT0 (CODE)
                                   1064 	.area GSINIT1 (CODE)
                                   1065 	.area GSINIT2 (CODE)
                                   1066 	.area GSINIT3 (CODE)
                                   1067 	.area GSINIT4 (CODE)
                                   1068 	.area GSINIT5 (CODE)
                                   1069 	.area GSINIT  (CODE)
                                   1070 	.area GSFINAL (CODE)
                                   1071 	.area CSEG    (CODE)
                                   1072 ;--------------------------------------------------------
                                   1073 ; interrupt vector 
                                   1074 ;--------------------------------------------------------
                                   1075 	.area HOME    (CODE)
      000000                       1076 __interrupt_vect:
      000000 02r00r00         [24] 1077 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1078 	reti
      000004                       1079 	.ds	7
      00000B 32               [24] 1080 	reti
      00000C                       1081 	.ds	7
      000013 32               [24] 1082 	reti
      000014                       1083 	.ds	7
      00001B 32               [24] 1084 	reti
      00001C                       1085 	.ds	7
      000023 32               [24] 1086 	reti
      000024                       1087 	.ds	7
      00002B 32               [24] 1088 	reti
      00002C                       1089 	.ds	7
      000033 32               [24] 1090 	reti
      000034                       1091 	.ds	7
      00003B 32               [24] 1092 	reti
      00003C                       1093 	.ds	7
      000043 32               [24] 1094 	reti
      000044                       1095 	.ds	7
      00004B 02r05rB9         [24] 1096 	ljmp	_PCA_ISR
                                   1097 ;--------------------------------------------------------
                                   1098 ; global & static initialisations
                                   1099 ;--------------------------------------------------------
                                   1100 	.area HOME    (CODE)
                                   1101 	.area GSINIT  (CODE)
                                   1102 	.area GSFINAL (CODE)
                                   1103 	.area GSINIT  (CODE)
                                   1104 	.globl __sdcc_gsinit_startup
                                   1105 	.globl __sdcc_program_startup
                                   1106 	.globl __start__stack
                                   1107 	.globl __mcs51_genXINIT
                                   1108 	.globl __mcs51_genXRAMCLEAR
                                   1109 	.globl __mcs51_genRAMCLEAR
                           000000  1110 	C$lab3_2.c$39$1$143 ==.
                                   1111 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:39: unsigned int PW_CENTER = 2769;
      000000 75*23 D1         [24] 1112 	mov	_PW_CENTER,#0xd1
      000003 75*24 0A         [24] 1113 	mov	(_PW_CENTER + 1),#0x0a
                           000006  1114 	C$lab3_2.c$45$1$143 ==.
                                   1115 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:45: int Counts = 0;
      000006 E4               [12] 1116 	clr	a
      000007 F5*2A            [12] 1117 	mov	_Counts,a
      000009 F5*2B            [12] 1118 	mov	(_Counts + 1),a
                                   1119 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1120 	ljmp	__sdcc_program_startup
                                   1121 ;--------------------------------------------------------
                                   1122 ; Home
                                   1123 ;--------------------------------------------------------
                                   1124 	.area HOME    (CODE)
                                   1125 	.area HOME    (CODE)
      00004E                       1126 __sdcc_program_startup:
      00004E 02r04rFA         [24] 1127 	ljmp	_main
                                   1128 ;	return from main will return to caller
                                   1129 ;--------------------------------------------------------
                                   1130 ; code
                                   1131 ;--------------------------------------------------------
                                   1132 	.area CSEG    (CODE)
                                   1133 ;------------------------------------------------------------
                                   1134 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1135 ;------------------------------------------------------------
                                   1136 ;i                         Allocated to registers r6 r7 
                                   1137 ;------------------------------------------------------------
                           000000  1138 	G$SYSCLK_Init$0$0 ==.
                           000000  1139 	C$c8051_SDCC.h$42$0$0 ==.
                                   1140 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1141 ;	-----------------------------------------
                                   1142 ;	 function SYSCLK_Init
                                   1143 ;	-----------------------------------------
      000000                       1144 _SYSCLK_Init:
                           000007  1145 	ar7 = 0x07
                           000006  1146 	ar6 = 0x06
                           000005  1147 	ar5 = 0x05
                           000004  1148 	ar4 = 0x04
                           000003  1149 	ar3 = 0x03
                           000002  1150 	ar2 = 0x02
                           000001  1151 	ar1 = 0x01
                           000000  1152 	ar0 = 0x00
                           000000  1153 	C$c8051_SDCC.h$46$1$2 ==.
                                   1154 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1155 	mov	_OSCXCN,#0x67
                           000003  1156 	C$c8051_SDCC.h$49$1$2 ==.
                                   1157 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1158 	mov	r6,#0x00
      000005 7F 01            [12] 1159 	mov	r7,#0x01
      000007                       1160 00107$:
      000007 EE               [12] 1161 	mov	a,r6
      000008 24 FF            [12] 1162 	add	a,#0xff
      00000A FC               [12] 1163 	mov	r4,a
      00000B EF               [12] 1164 	mov	a,r7
      00000C 34 FF            [12] 1165 	addc	a,#0xff
      00000E FD               [12] 1166 	mov	r5,a
      00000F 8C 06            [24] 1167 	mov	ar6,r4
      000011 8D 07            [24] 1168 	mov	ar7,r5
      000013 EC               [12] 1169 	mov	a,r4
      000014 4D               [12] 1170 	orl	a,r5
      000015 70 F0            [24] 1171 	jnz	00107$
                           000017  1172 	C$c8051_SDCC.h$51$1$2 ==.
                                   1173 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000017                       1174 00102$:
      000017 E5 B1            [12] 1175 	mov	a,_OSCXCN
      000019 30 E7 FB         [24] 1176 	jnb	acc.7,00102$
                           00001C  1177 	C$c8051_SDCC.h$53$1$2 ==.
                                   1178 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      00001C 75 B2 88         [24] 1179 	mov	_OSCICN,#0x88
                           00001F  1180 	C$c8051_SDCC.h$56$1$2 ==.
                           00001F  1181 	XG$SYSCLK_Init$0$0 ==.
      00001F 22               [24] 1182 	ret
                                   1183 ;------------------------------------------------------------
                                   1184 ;Allocation info for local variables in function 'UART0_Init'
                                   1185 ;------------------------------------------------------------
                           000020  1186 	G$UART0_Init$0$0 ==.
                           000020  1187 	C$c8051_SDCC.h$64$1$2 ==.
                                   1188 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1189 ;	-----------------------------------------
                                   1190 ;	 function UART0_Init
                                   1191 ;	-----------------------------------------
      000020                       1192 _UART0_Init:
                           000020  1193 	C$c8051_SDCC.h$66$1$4 ==.
                                   1194 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000020 75 98 50         [24] 1195 	mov	_SCON0,#0x50
                           000023  1196 	C$c8051_SDCC.h$67$1$4 ==.
                                   1197 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      000023 75 89 20         [24] 1198 	mov	_TMOD,#0x20
                           000026  1199 	C$c8051_SDCC.h$68$1$4 ==.
                                   1200 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = 0xFF&-(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      000026 75 8D DC         [24] 1201 	mov	_TH1,#0xdc
                           000029  1202 	C$c8051_SDCC.h$69$1$4 ==.
                                   1203 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000029 D2 8E            [12] 1204 	setb	_TR1
                           00002B  1205 	C$c8051_SDCC.h$70$1$4 ==.
                                   1206 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      00002B 43 8E 10         [24] 1207 	orl	_CKCON,#0x10
                           00002E  1208 	C$c8051_SDCC.h$71$1$4 ==.
                                   1209 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      00002E 43 87 80         [24] 1210 	orl	_PCON,#0x80
                           000031  1211 	C$c8051_SDCC.h$73$1$4 ==.
                                   1212 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      000031 D2 99            [12] 1213 	setb	_TI0
                           000033  1214 	C$c8051_SDCC.h$74$1$4 ==.
                                   1215 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      000033 43 A4 01         [24] 1216 	orl	_P0MDOUT,#0x01
                           000036  1217 	C$c8051_SDCC.h$75$1$4 ==.
                           000036  1218 	XG$UART0_Init$0$0 ==.
      000036 22               [24] 1219 	ret
                                   1220 ;------------------------------------------------------------
                                   1221 ;Allocation info for local variables in function 'Sys_Init'
                                   1222 ;------------------------------------------------------------
                           000037  1223 	G$Sys_Init$0$0 ==.
                           000037  1224 	C$c8051_SDCC.h$83$1$4 ==.
                                   1225 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1226 ;	-----------------------------------------
                                   1227 ;	 function Sys_Init
                                   1228 ;	-----------------------------------------
      000037                       1229 _Sys_Init:
                           000037  1230 	C$c8051_SDCC.h$85$1$6 ==.
                                   1231 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000037 75 FF DE         [24] 1232 	mov	_WDTCN,#0xde
                           00003A  1233 	C$c8051_SDCC.h$86$1$6 ==.
                                   1234 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      00003A 75 FF AD         [24] 1235 	mov	_WDTCN,#0xad
                           00003D  1236 	C$c8051_SDCC.h$88$1$6 ==.
                                   1237 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      00003D 12r00r00         [24] 1238 	lcall	_SYSCLK_Init
                           000040  1239 	C$c8051_SDCC.h$89$1$6 ==.
                                   1240 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000040 12r00r20         [24] 1241 	lcall	_UART0_Init
                           000043  1242 	C$c8051_SDCC.h$91$1$6 ==.
                                   1243 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      000043 43 E1 04         [24] 1244 	orl	_XBR0,#0x04
                           000046  1245 	C$c8051_SDCC.h$92$1$6 ==.
                                   1246 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      000046 43 E3 40         [24] 1247 	orl	_XBR2,#0x40
                           000049  1248 	C$c8051_SDCC.h$93$1$6 ==.
                           000049  1249 	XG$Sys_Init$0$0 ==.
      000049 22               [24] 1250 	ret
                                   1251 ;------------------------------------------------------------
                                   1252 ;Allocation info for local variables in function 'putchar'
                                   1253 ;------------------------------------------------------------
                                   1254 ;c                         Allocated to registers r7 
                                   1255 ;------------------------------------------------------------
                           00004A  1256 	G$putchar$0$0 ==.
                           00004A  1257 	C$c8051_SDCC.h$98$1$6 ==.
                                   1258 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1259 ;	-----------------------------------------
                                   1260 ;	 function putchar
                                   1261 ;	-----------------------------------------
      00004A                       1262 _putchar:
      00004A AF 82            [24] 1263 	mov	r7,dpl
                           00004C  1264 	C$c8051_SDCC.h$100$1$8 ==.
                                   1265 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      00004C                       1266 00101$:
                           00004C  1267 	C$c8051_SDCC.h$101$1$8 ==.
                                   1268 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      00004C 10 99 02         [24] 1269 	jbc	_TI0,00112$
      00004F 80 FB            [24] 1270 	sjmp	00101$
      000051                       1271 00112$:
                           000051  1272 	C$c8051_SDCC.h$102$1$8 ==.
                                   1273 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      000051 8F 99            [24] 1274 	mov	_SBUF0,r7
                           000053  1275 	C$c8051_SDCC.h$103$1$8 ==.
                           000053  1276 	XG$putchar$0$0 ==.
      000053 22               [24] 1277 	ret
                                   1278 ;------------------------------------------------------------
                                   1279 ;Allocation info for local variables in function 'getchar'
                                   1280 ;------------------------------------------------------------
                                   1281 ;c                         Allocated to registers 
                                   1282 ;------------------------------------------------------------
                           000054  1283 	G$getchar$0$0 ==.
                           000054  1284 	C$c8051_SDCC.h$108$1$8 ==.
                                   1285 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1286 ;	-----------------------------------------
                                   1287 ;	 function getchar
                                   1288 ;	-----------------------------------------
      000054                       1289 _getchar:
                           000054  1290 	C$c8051_SDCC.h$111$1$10 ==.
                                   1291 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      000054                       1292 00101$:
                           000054  1293 	C$c8051_SDCC.h$112$1$10 ==.
                                   1294 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      000054 10 98 02         [24] 1295 	jbc	_RI0,00112$
      000057 80 FB            [24] 1296 	sjmp	00101$
      000059                       1297 00112$:
                           000059  1298 	C$c8051_SDCC.h$113$1$10 ==.
                                   1299 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000059 85 99 82         [24] 1300 	mov	dpl,_SBUF0
                           00005C  1301 	C$c8051_SDCC.h$114$1$10 ==.
                                   1302 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      00005C 12r00r4A         [24] 1303 	lcall	_putchar
                           00005F  1304 	C$c8051_SDCC.h$115$1$10 ==.
                                   1305 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      00005F 85 99 82         [24] 1306 	mov	dpl,_SBUF0
                           000062  1307 	C$c8051_SDCC.h$116$1$10 ==.
                           000062  1308 	XG$getchar$0$0 ==.
      000062 22               [24] 1309 	ret
                                   1310 ;------------------------------------------------------------
                                   1311 ;Allocation info for local variables in function 'getchar_nw'
                                   1312 ;------------------------------------------------------------
                                   1313 ;c                         Allocated to registers 
                                   1314 ;------------------------------------------------------------
                           000063  1315 	G$getchar_nw$0$0 ==.
                           000063  1316 	C$c8051_SDCC.h$121$1$10 ==.
                                   1317 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:121: char getchar_nw(void)
                                   1318 ;	-----------------------------------------
                                   1319 ;	 function getchar_nw
                                   1320 ;	-----------------------------------------
      000063                       1321 _getchar_nw:
                           000063  1322 	C$c8051_SDCC.h$124$1$12 ==.
                                   1323 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:124: if (!RI0) return 0xFF;
      000063 20 98 05         [24] 1324 	jb	_RI0,00102$
      000066 75 82 FF         [24] 1325 	mov	dpl,#0xff
      000069 80 0B            [24] 1326 	sjmp	00104$
      00006B                       1327 00102$:
                           00006B  1328 	C$c8051_SDCC.h$127$2$13 ==.
                                   1329 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:127: RI0 = 0;
      00006B C2 98            [12] 1330 	clr	_RI0
                           00006D  1331 	C$c8051_SDCC.h$128$2$13 ==.
                                   1332 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:128: c = SBUF0;
      00006D 85 99 82         [24] 1333 	mov	dpl,_SBUF0
                           000070  1334 	C$c8051_SDCC.h$129$2$13 ==.
                                   1335 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:129: putchar(c);                          // echo to terminal
      000070 12r00r4A         [24] 1336 	lcall	_putchar
                           000073  1337 	C$c8051_SDCC.h$130$2$13 ==.
                                   1338 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:130: return SBUF0;
      000073 85 99 82         [24] 1339 	mov	dpl,_SBUF0
      000076                       1340 00104$:
                           000076  1341 	C$c8051_SDCC.h$132$1$12 ==.
                           000076  1342 	XG$getchar_nw$0$0 ==.
      000076 22               [24] 1343 	ret
                                   1344 ;------------------------------------------------------------
                                   1345 ;Allocation info for local variables in function 'lcd_print'
                                   1346 ;------------------------------------------------------------
                                   1347 ;fmt                       Allocated to stack - _bp -5
                                   1348 ;len                       Allocated to registers r6 
                                   1349 ;i                         Allocated to registers 
                                   1350 ;ap                        Allocated to registers 
                                   1351 ;text                      Allocated with name '_lcd_print_text_1_81'
                                   1352 ;------------------------------------------------------------
                           000077  1353 	G$lcd_print$0$0 ==.
                           000077  1354 	C$i2c.h$84$1$12 ==.
                                   1355 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:84: void lcd_print(const char *fmt, ...)
                                   1356 ;	-----------------------------------------
                                   1357 ;	 function lcd_print
                                   1358 ;	-----------------------------------------
      000077                       1359 _lcd_print:
      000077 C0*00            [24] 1360 	push	_bp
      000079 85 81*00         [24] 1361 	mov	_bp,sp
                           00007C  1362 	C$i2c.h$90$1$81 ==.
                                   1363 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:90: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      00007C E5*00            [12] 1364 	mov	a,_bp
      00007E 24 FB            [12] 1365 	add	a,#0xfb
      000080 F8               [12] 1366 	mov	r0,a
      000081 86 82            [24] 1367 	mov	dpl,@r0
      000083 08               [12] 1368 	inc	r0
      000084 86 83            [24] 1369 	mov	dph,@r0
      000086 08               [12] 1370 	inc	r0
      000087 86 F0            [24] 1371 	mov	b,@r0
      000089 12r00r00         [24] 1372 	lcall	_strlen
      00008C E5 82            [12] 1373 	mov	a,dpl
      00008E 85 83 F0         [24] 1374 	mov	b,dph
      000091 45 F0            [12] 1375 	orl	a,b
      000093 70 02            [24] 1376 	jnz	00102$
      000095 80 62            [24] 1377 	sjmp	00109$
      000097                       1378 00102$:
                           000097  1379 	C$i2c.h$92$2$82 ==.
                                   1380 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:92: va_start(ap, fmt);
      000097 E5*00            [12] 1381 	mov	a,_bp
      000099 24 FB            [12] 1382 	add	a,#0xfb
      00009B FF               [12] 1383 	mov	r7,a
      00009C 8F*00            [24] 1384 	mov	_vsprintf_PARM_3,r7
                           00009E  1385 	C$i2c.h$93$1$81 ==.
                                   1386 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:93: vsprintf(text, fmt, ap);
      00009E E5*00            [12] 1387 	mov	a,_bp
      0000A0 24 FB            [12] 1388 	add	a,#0xfb
      0000A2 F8               [12] 1389 	mov	r0,a
      0000A3 86*00            [24] 1390 	mov	_vsprintf_PARM_2,@r0
      0000A5 08               [12] 1391 	inc	r0
      0000A6 86*01            [24] 1392 	mov	(_vsprintf_PARM_2 + 1),@r0
      0000A8 08               [12] 1393 	inc	r0
      0000A9 86*02            [24] 1394 	mov	(_vsprintf_PARM_2 + 2),@r0
      0000AB 90r00r00         [24] 1395 	mov	dptr,#_lcd_print_text_1_81
      0000AE 75 F0 00         [24] 1396 	mov	b,#0x00
      0000B1 12r00r00         [24] 1397 	lcall	_vsprintf
                           0000B4  1398 	C$i2c.h$96$1$81 ==.
                                   1399 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:96: len = strlen(text);
      0000B4 90r00r00         [24] 1400 	mov	dptr,#_lcd_print_text_1_81
      0000B7 75 F0 00         [24] 1401 	mov	b,#0x00
      0000BA 12r00r00         [24] 1402 	lcall	_strlen
      0000BD AE 82            [24] 1403 	mov	r6,dpl
                           0000BF  1404 	C$i2c.h$97$1$81 ==.
                                   1405 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000BF 7F 00            [12] 1406 	mov	r7,#0x00
      0000C1                       1407 00107$:
      0000C1 C3               [12] 1408 	clr	c
      0000C2 EF               [12] 1409 	mov	a,r7
      0000C3 9E               [12] 1410 	subb	a,r6
      0000C4 50 1F            [24] 1411 	jnc	00105$
                           0000C6  1412 	C$i2c.h$99$2$84 ==.
                                   1413 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:99: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000C6 EF               [12] 1414 	mov	a,r7
      0000C7 24r00            [12] 1415 	add	a,#_lcd_print_text_1_81
      0000C9 F5 82            [12] 1416 	mov	dpl,a
      0000CB E4               [12] 1417 	clr	a
      0000CC 34s00            [12] 1418 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000CE F5 83            [12] 1419 	mov	dph,a
      0000D0 E0               [24] 1420 	movx	a,@dptr
      0000D1 FD               [12] 1421 	mov	r5,a
      0000D2 BD 0A 0D         [24] 1422 	cjne	r5,#0x0a,00108$
      0000D5 EF               [12] 1423 	mov	a,r7
      0000D6 24r00            [12] 1424 	add	a,#_lcd_print_text_1_81
      0000D8 F5 82            [12] 1425 	mov	dpl,a
      0000DA E4               [12] 1426 	clr	a
      0000DB 34s00            [12] 1427 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000DD F5 83            [12] 1428 	mov	dph,a
      0000DF 74 0D            [12] 1429 	mov	a,#0x0d
      0000E1 F0               [24] 1430 	movx	@dptr,a
      0000E2                       1431 00108$:
                           0000E2  1432 	C$i2c.h$97$1$81 ==.
                                   1433 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000E2 0F               [12] 1434 	inc	r7
      0000E3 80 DC            [24] 1435 	sjmp	00107$
      0000E5                       1436 00105$:
                           0000E5  1437 	C$i2c.h$102$1$81 ==.
                                   1438 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:102: i2c_write_data(0xC6, 0x00, text, len);
      0000E5 75*0Br00         [24] 1439 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_81
      0000E8 75*0Cs00         [24] 1440 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_81 >> 8)
      0000EB 75*0D 00         [24] 1441 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000EE 75*0A 00         [24] 1442 	mov	_i2c_write_data_PARM_2,#0x00
      0000F1 8E*0E            [24] 1443 	mov	_i2c_write_data_PARM_4,r6
      0000F3 75 82 C6         [24] 1444 	mov	dpl,#0xc6
      0000F6 12r03r88         [24] 1445 	lcall	_i2c_write_data
      0000F9                       1446 00109$:
      0000F9 D0*00            [24] 1447 	pop	_bp
                           0000FB  1448 	C$i2c.h$103$1$81 ==.
                           0000FB  1449 	XG$lcd_print$0$0 ==.
      0000FB 22               [24] 1450 	ret
                                   1451 ;------------------------------------------------------------
                                   1452 ;Allocation info for local variables in function 'lcd_clear'
                                   1453 ;------------------------------------------------------------
                                   1454 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_85'
                                   1455 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_85'
                                   1456 ;------------------------------------------------------------
                           0000FC  1457 	G$lcd_clear$0$0 ==.
                           0000FC  1458 	C$i2c.h$106$1$81 ==.
                                   1459 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:106: void lcd_clear()
                                   1460 ;	-----------------------------------------
                                   1461 ;	 function lcd_clear
                                   1462 ;	-----------------------------------------
      0000FC                       1463 _lcd_clear:
                           0000FC  1464 	C$i2c.h$108$1$81 ==.
                                   1465 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:108: unsigned char NumBytes=0, Cmd[2];
      0000FC 75*05 00         [24] 1466 	mov	_lcd_clear_NumBytes_1_85,#0x00
                           0000FF  1467 	C$i2c.h$110$1$85 ==.
                                   1468 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:110: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000FF                       1469 00101$:
      0000FF 74 C0            [12] 1470 	mov	a,#0x100 - 0x40
      000101 25*05            [12] 1471 	add	a,_lcd_clear_NumBytes_1_85
      000103 40 17            [24] 1472 	jc	00103$
      000105 75*10r05         [24] 1473 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_85
      000108 75*11 00         [24] 1474 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00010B 75*12 40         [24] 1475 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00010E 75*0F 00         [24] 1476 	mov	_i2c_read_data_PARM_2,#0x00
      000111 75*13 01         [24] 1477 	mov	_i2c_read_data_PARM_4,#0x01
      000114 75 82 C6         [24] 1478 	mov	dpl,#0xc6
      000117 12r03rFE         [24] 1479 	lcall	_i2c_read_data
      00011A 80 E3            [24] 1480 	sjmp	00101$
      00011C                       1481 00103$:
                           00011C  1482 	C$i2c.h$112$1$85 ==.
                                   1483 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:112: Cmd[0] = 12;
      00011C 75*06 0C         [24] 1484 	mov	_lcd_clear_Cmd_1_85,#0x0c
                           00011F  1485 	C$i2c.h$113$1$85 ==.
                                   1486 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:113: i2c_write_data(0xC6, 0x00, Cmd, 1);
      00011F 75*0Br06         [24] 1487 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_85
      000122 75*0C 00         [24] 1488 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000125 75*0D 40         [24] 1489 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000128 75*0A 00         [24] 1490 	mov	_i2c_write_data_PARM_2,#0x00
      00012B 75*0E 01         [24] 1491 	mov	_i2c_write_data_PARM_4,#0x01
      00012E 75 82 C6         [24] 1492 	mov	dpl,#0xc6
      000131 12r03r88         [24] 1493 	lcall	_i2c_write_data
                           000134  1494 	C$i2c.h$114$1$85 ==.
                           000134  1495 	XG$lcd_clear$0$0 ==.
      000134 22               [24] 1496 	ret
                                   1497 ;------------------------------------------------------------
                                   1498 ;Allocation info for local variables in function 'read_keypad'
                                   1499 ;------------------------------------------------------------
                                   1500 ;i                         Allocated to registers r7 
                                   1501 ;Data                      Allocated with name '_read_keypad_Data_1_86'
                                   1502 ;------------------------------------------------------------
                           000135  1503 	G$read_keypad$0$0 ==.
                           000135  1504 	C$i2c.h$117$1$85 ==.
                                   1505 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:117: char read_keypad()
                                   1506 ;	-----------------------------------------
                                   1507 ;	 function read_keypad
                                   1508 ;	-----------------------------------------
      000135                       1509 _read_keypad:
                           000135  1510 	C$i2c.h$121$1$86 ==.
                                   1511 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:121: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      000135 75*10r08         [24] 1512 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_86
      000138 75*11 00         [24] 1513 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00013B 75*12 40         [24] 1514 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00013E 75*0F 01         [24] 1515 	mov	_i2c_read_data_PARM_2,#0x01
      000141 75*13 02         [24] 1516 	mov	_i2c_read_data_PARM_4,#0x02
      000144 75 82 C6         [24] 1517 	mov	dpl,#0xc6
      000147 12r03rFE         [24] 1518 	lcall	_i2c_read_data
                           00014A  1519 	C$i2c.h$122$1$86 ==.
                                   1520 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:122: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00014A 74 FF            [12] 1521 	mov	a,#0xff
      00014C B5*08 05         [24] 1522 	cjne	a,_read_keypad_Data_1_86,00102$
      00014F 75 82 00         [24] 1523 	mov	dpl,#0x00
      000152 80 5F            [24] 1524 	sjmp	00116$
      000154                       1525 00102$:
                           000154  1526 	C$i2c.h$124$1$86 ==.
                                   1527 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)             //loop 8 times
      000154 7F 00            [12] 1528 	mov	r7,#0x00
      000156 8F 06            [24] 1529 	mov	ar6,r7
      000158                       1530 00114$:
                           000158  1531 	C$i2c.h$126$2$87 ==.
                                   1532 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:126: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      000158 8E F0            [24] 1533 	mov	b,r6
      00015A 05 F0            [12] 1534 	inc	b
      00015C 7C 01            [12] 1535 	mov	r4,#0x01
      00015E 7D 00            [12] 1536 	mov	r5,#0x00
      000160 80 06            [24] 1537 	sjmp	00145$
      000162                       1538 00144$:
      000162 EC               [12] 1539 	mov	a,r4
      000163 2C               [12] 1540 	add	a,r4
      000164 FC               [12] 1541 	mov	r4,a
      000165 ED               [12] 1542 	mov	a,r5
      000166 33               [12] 1543 	rlc	a
      000167 FD               [12] 1544 	mov	r5,a
      000168                       1545 00145$:
      000168 D5 F0 F7         [24] 1546 	djnz	b,00144$
      00016B AA*08            [24] 1547 	mov	r2,_read_keypad_Data_1_86
      00016D 7B 00            [12] 1548 	mov	r3,#0x00
      00016F EA               [12] 1549 	mov	a,r2
      000170 52 04            [12] 1550 	anl	ar4,a
      000172 EB               [12] 1551 	mov	a,r3
      000173 52 05            [12] 1552 	anl	ar5,a
      000175 EC               [12] 1553 	mov	a,r4
      000176 4D               [12] 1554 	orl	a,r5
      000177 60 07            [24] 1555 	jz	00115$
                           000179  1556 	C$i2c.h$127$2$87 ==.
                                   1557 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:127: return i+49;
      000179 74 31            [12] 1558 	mov	a,#0x31
      00017B 2F               [12] 1559 	add	a,r7
      00017C F5 82            [12] 1560 	mov	dpl,a
      00017E 80 33            [24] 1561 	sjmp	00116$
      000180                       1562 00115$:
                           000180  1563 	C$i2c.h$124$1$86 ==.
                                   1564 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)             //loop 8 times
      000180 0E               [12] 1565 	inc	r6
      000181 8E 07            [24] 1566 	mov	ar7,r6
      000183 BE 08 00         [24] 1567 	cjne	r6,#0x08,00147$
      000186                       1568 00147$:
      000186 40 D0            [24] 1569 	jc	00114$
                           000188  1570 	C$i2c.h$130$1$86 ==.
                                   1571 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:130: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      000188 E5*09            [12] 1572 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      00018A 30 E0 05         [24] 1573 	jnb	acc.0,00107$
      00018D 75 82 39         [24] 1574 	mov	dpl,#0x39
      000190 80 21            [24] 1575 	sjmp	00116$
      000192                       1576 00107$:
                           000192  1577 	C$i2c.h$132$1$86 ==.
                                   1578 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:132: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000192 E5*09            [12] 1579 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      000194 30 E1 05         [24] 1580 	jnb	acc.1,00109$
      000197 75 82 2A         [24] 1581 	mov	dpl,#0x2a
      00019A 80 17            [24] 1582 	sjmp	00116$
      00019C                       1583 00109$:
                           00019C  1584 	C$i2c.h$134$1$86 ==.
                                   1585 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:134: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      00019C E5*09            [12] 1586 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      00019E 30 E2 05         [24] 1587 	jnb	acc.2,00111$
      0001A1 75 82 30         [24] 1588 	mov	dpl,#0x30
      0001A4 80 0D            [24] 1589 	sjmp	00116$
      0001A6                       1590 00111$:
                           0001A6  1591 	C$i2c.h$136$1$86 ==.
                                   1592 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:136: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      0001A6 E5*09            [12] 1593 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      0001A8 30 E3 05         [24] 1594 	jnb	acc.3,00113$
      0001AB 75 82 23         [24] 1595 	mov	dpl,#0x23
      0001AE 80 03            [24] 1596 	sjmp	00116$
      0001B0                       1597 00113$:
                           0001B0  1598 	C$i2c.h$138$1$86 ==.
                                   1599 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:138: return 0xFF;                     //else return a numerical -1 (0xFF)
      0001B0 75 82 FF         [24] 1600 	mov	dpl,#0xff
      0001B3                       1601 00116$:
                           0001B3  1602 	C$i2c.h$139$1$86 ==.
                           0001B3  1603 	XG$read_keypad$0$0 ==.
      0001B3 22               [24] 1604 	ret
                                   1605 ;------------------------------------------------------------
                                   1606 ;Allocation info for local variables in function 'kpd_input'
                                   1607 ;------------------------------------------------------------
                                   1608 ;mode                      Allocated to registers r7 
                                   1609 ;sum                       Allocated to registers r5 r6 
                                   1610 ;key                       Allocated to registers r3 
                                   1611 ;i                         Allocated to registers 
                                   1612 ;------------------------------------------------------------
                           0001B4  1613 	G$kpd_input$0$0 ==.
                           0001B4  1614 	C$i2c.h$151$1$86 ==.
                                   1615 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:151: unsigned int kpd_input(char mode)
                                   1616 ;	-----------------------------------------
                                   1617 ;	 function kpd_input
                                   1618 ;	-----------------------------------------
      0001B4                       1619 _kpd_input:
      0001B4 AF 82            [24] 1620 	mov	r7,dpl
                           0001B6  1621 	C$i2c.h$156$1$89 ==.
                                   1622 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:156: sum = 0;
                           0001B6  1623 	C$i2c.h$159$1$89 ==.
                                   1624 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:159: if(mode==0)lcd_print("\nType digits; end w/#");
      0001B6 E4               [12] 1625 	clr	a
      0001B7 FD               [12] 1626 	mov	r5,a
      0001B8 FE               [12] 1627 	mov	r6,a
      0001B9 EF               [12] 1628 	mov	a,r7
      0001BA 70 1D            [24] 1629 	jnz	00102$
      0001BC C0 06            [24] 1630 	push	ar6
      0001BE C0 05            [24] 1631 	push	ar5
      0001C0 74r00            [12] 1632 	mov	a,#___str_0
      0001C2 C0 E0            [24] 1633 	push	acc
      0001C4 74s00            [12] 1634 	mov	a,#(___str_0 >> 8)
      0001C6 C0 E0            [24] 1635 	push	acc
      0001C8 74 80            [12] 1636 	mov	a,#0x80
      0001CA C0 E0            [24] 1637 	push	acc
      0001CC 12r00r77         [24] 1638 	lcall	_lcd_print
      0001CF 15 81            [12] 1639 	dec	sp
      0001D1 15 81            [12] 1640 	dec	sp
      0001D3 15 81            [12] 1641 	dec	sp
      0001D5 D0 05            [24] 1642 	pop	ar5
      0001D7 D0 06            [24] 1643 	pop	ar6
      0001D9                       1644 00102$:
                           0001D9  1645 	C$i2c.h$161$1$89 ==.
                                   1646 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:161: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001D9 C0 06            [24] 1647 	push	ar6
      0001DB C0 05            [24] 1648 	push	ar5
      0001DD 74 08            [12] 1649 	mov	a,#0x08
      0001DF C0 E0            [24] 1650 	push	acc
      0001E1 E4               [12] 1651 	clr	a
      0001E2 C0 E0            [24] 1652 	push	acc
      0001E4 74 08            [12] 1653 	mov	a,#0x08
      0001E6 C0 E0            [24] 1654 	push	acc
      0001E8 E4               [12] 1655 	clr	a
      0001E9 C0 E0            [24] 1656 	push	acc
      0001EB 74 08            [12] 1657 	mov	a,#0x08
      0001ED C0 E0            [24] 1658 	push	acc
      0001EF E4               [12] 1659 	clr	a
      0001F0 C0 E0            [24] 1660 	push	acc
      0001F2 74 08            [12] 1661 	mov	a,#0x08
      0001F4 C0 E0            [24] 1662 	push	acc
      0001F6 E4               [12] 1663 	clr	a
      0001F7 C0 E0            [24] 1664 	push	acc
      0001F9 74 08            [12] 1665 	mov	a,#0x08
      0001FB C0 E0            [24] 1666 	push	acc
      0001FD E4               [12] 1667 	clr	a
      0001FE C0 E0            [24] 1668 	push	acc
      000200 74r16            [12] 1669 	mov	a,#___str_1
      000202 C0 E0            [24] 1670 	push	acc
      000204 74s00            [12] 1671 	mov	a,#(___str_1 >> 8)
      000206 C0 E0            [24] 1672 	push	acc
      000208 74 80            [12] 1673 	mov	a,#0x80
      00020A C0 E0            [24] 1674 	push	acc
      00020C 12r00r77         [24] 1675 	lcall	_lcd_print
      00020F E5 81            [12] 1676 	mov	a,sp
      000211 24 F3            [12] 1677 	add	a,#0xf3
      000213 F5 81            [12] 1678 	mov	sp,a
                           000215  1679 	C$i2c.h$163$1$89 ==.
                                   1680 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:163: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      000215 90 A1 20         [24] 1681 	mov	dptr,#0xa120
      000218 75 F0 07         [24] 1682 	mov	b,#0x07
      00021B E4               [12] 1683 	clr	a
      00021C 12r03r23         [24] 1684 	lcall	_delay_time
      00021F D0 05            [24] 1685 	pop	ar5
      000221 D0 06            [24] 1686 	pop	ar6
                           000223  1687 	C$i2c.h$167$1$89 ==.
                                   1688 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000223 7F 00            [12] 1689 	mov	r7,#0x00
                           000225  1690 	C$i2c.h$169$3$92 ==.
                                   1691 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:169: while(((key=read_keypad()) == 0xFF) || (key == '*'))delay_time(10000);
      000225                       1692 00104$:
      000225 C0 07            [24] 1693 	push	ar7
      000227 C0 06            [24] 1694 	push	ar6
      000229 C0 05            [24] 1695 	push	ar5
      00022B 12r01r35         [24] 1696 	lcall	_read_keypad
      00022E AC 82            [24] 1697 	mov	r4,dpl
      000230 D0 05            [24] 1698 	pop	ar5
      000232 D0 06            [24] 1699 	pop	ar6
      000234 D0 07            [24] 1700 	pop	ar7
      000236 8C 03            [24] 1701 	mov	ar3,r4
      000238 BC FF 02         [24] 1702 	cjne	r4,#0xff,00146$
      00023B 80 03            [24] 1703 	sjmp	00105$
      00023D                       1704 00146$:
      00023D BB 2A 17         [24] 1705 	cjne	r3,#0x2a,00106$
      000240                       1706 00105$:
      000240 90 27 10         [24] 1707 	mov	dptr,#0x2710
      000243 E4               [12] 1708 	clr	a
      000244 F5 F0            [12] 1709 	mov	b,a
      000246 C0 07            [24] 1710 	push	ar7
      000248 C0 06            [24] 1711 	push	ar6
      00024A C0 05            [24] 1712 	push	ar5
      00024C 12r03r23         [24] 1713 	lcall	_delay_time
      00024F D0 05            [24] 1714 	pop	ar5
      000251 D0 06            [24] 1715 	pop	ar6
      000253 D0 07            [24] 1716 	pop	ar7
      000255 80 CE            [24] 1717 	sjmp	00104$
      000257                       1718 00106$:
                           000257  1719 	C$i2c.h$170$2$90 ==.
                                   1720 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:170: if(key == '#')
      000257 BB 23 2A         [24] 1721 	cjne	r3,#0x23,00114$
                           00025A  1722 	C$i2c.h$172$3$91 ==.
                                   1723 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:172: while(read_keypad() == '#')delay_time(10000);
      00025A                       1724 00107$:
      00025A C0 06            [24] 1725 	push	ar6
      00025C C0 05            [24] 1726 	push	ar5
      00025E 12r01r35         [24] 1727 	lcall	_read_keypad
      000261 AC 82            [24] 1728 	mov	r4,dpl
      000263 D0 05            [24] 1729 	pop	ar5
      000265 D0 06            [24] 1730 	pop	ar6
      000267 BC 23 13         [24] 1731 	cjne	r4,#0x23,00109$
      00026A 90 27 10         [24] 1732 	mov	dptr,#0x2710
      00026D E4               [12] 1733 	clr	a
      00026E F5 F0            [12] 1734 	mov	b,a
      000270 C0 06            [24] 1735 	push	ar6
      000272 C0 05            [24] 1736 	push	ar5
      000274 12r03r23         [24] 1737 	lcall	_delay_time
      000277 D0 05            [24] 1738 	pop	ar5
      000279 D0 06            [24] 1739 	pop	ar6
      00027B 80 DD            [24] 1740 	sjmp	00107$
      00027D                       1741 00109$:
                           00027D  1742 	C$i2c.h$173$3$91 ==.
                                   1743 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:173: return sum;
      00027D 8D 82            [24] 1744 	mov	dpl,r5
      00027F 8E 83            [24] 1745 	mov	dph,r6
      000281 02r03r22         [24] 1746 	ljmp	00119$
      000284                       1747 00114$:
                           000284  1748 	C$i2c.h$177$3$92 ==.
                                   1749 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:177: lcd_print("%c", key);
      000284 8B 02            [24] 1750 	mov	ar2,r3
      000286 7C 00            [12] 1751 	mov	r4,#0x00
      000288 C0 07            [24] 1752 	push	ar7
      00028A C0 06            [24] 1753 	push	ar6
      00028C C0 05            [24] 1754 	push	ar5
      00028E C0 04            [24] 1755 	push	ar4
      000290 C0 03            [24] 1756 	push	ar3
      000292 C0 02            [24] 1757 	push	ar2
      000294 C0 02            [24] 1758 	push	ar2
      000296 C0 04            [24] 1759 	push	ar4
      000298 74r26            [12] 1760 	mov	a,#___str_2
      00029A C0 E0            [24] 1761 	push	acc
      00029C 74s00            [12] 1762 	mov	a,#(___str_2 >> 8)
      00029E C0 E0            [24] 1763 	push	acc
      0002A0 74 80            [12] 1764 	mov	a,#0x80
      0002A2 C0 E0            [24] 1765 	push	acc
      0002A4 12r00r77         [24] 1766 	lcall	_lcd_print
      0002A7 E5 81            [12] 1767 	mov	a,sp
      0002A9 24 FB            [12] 1768 	add	a,#0xfb
      0002AB F5 81            [12] 1769 	mov	sp,a
      0002AD D0 02            [24] 1770 	pop	ar2
      0002AF D0 03            [24] 1771 	pop	ar3
      0002B1 D0 04            [24] 1772 	pop	ar4
      0002B3 D0 05            [24] 1773 	pop	ar5
      0002B5 D0 06            [24] 1774 	pop	ar6
                           0002B7  1775 	C$i2c.h$178$1$89 ==.
                                   1776 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:178: sum = sum*10 + key - '0';
      0002B7 8D*00            [24] 1777 	mov	__mulint_PARM_2,r5
      0002B9 8E*01            [24] 1778 	mov	(__mulint_PARM_2 + 1),r6
      0002BB 90 00 0A         [24] 1779 	mov	dptr,#0x000a
      0002BE C0 04            [24] 1780 	push	ar4
      0002C0 C0 03            [24] 1781 	push	ar3
      0002C2 C0 02            [24] 1782 	push	ar2
      0002C4 12r00r00         [24] 1783 	lcall	__mulint
      0002C7 A8 82            [24] 1784 	mov	r0,dpl
      0002C9 A9 83            [24] 1785 	mov	r1,dph
      0002CB D0 02            [24] 1786 	pop	ar2
      0002CD D0 03            [24] 1787 	pop	ar3
      0002CF D0 04            [24] 1788 	pop	ar4
      0002D1 D0 07            [24] 1789 	pop	ar7
      0002D3 EA               [12] 1790 	mov	a,r2
      0002D4 28               [12] 1791 	add	a,r0
      0002D5 F8               [12] 1792 	mov	r0,a
      0002D6 EC               [12] 1793 	mov	a,r4
      0002D7 39               [12] 1794 	addc	a,r1
      0002D8 F9               [12] 1795 	mov	r1,a
      0002D9 E8               [12] 1796 	mov	a,r0
      0002DA 24 D0            [12] 1797 	add	a,#0xd0
      0002DC FD               [12] 1798 	mov	r5,a
      0002DD E9               [12] 1799 	mov	a,r1
      0002DE 34 FF            [12] 1800 	addc	a,#0xff
      0002E0 FE               [12] 1801 	mov	r6,a
                           0002E1  1802 	C$i2c.h$179$3$92 ==.
                                   1803 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:179: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002E1                       1804 00110$:
      0002E1 C0 07            [24] 1805 	push	ar7
      0002E3 C0 06            [24] 1806 	push	ar6
      0002E5 C0 05            [24] 1807 	push	ar5
      0002E7 C0 03            [24] 1808 	push	ar3
      0002E9 12r01r35         [24] 1809 	lcall	_read_keypad
      0002EC AC 82            [24] 1810 	mov	r4,dpl
      0002EE D0 03            [24] 1811 	pop	ar3
      0002F0 D0 05            [24] 1812 	pop	ar5
      0002F2 D0 06            [24] 1813 	pop	ar6
      0002F4 D0 07            [24] 1814 	pop	ar7
      0002F6 EC               [12] 1815 	mov	a,r4
      0002F7 B5 03 1B         [24] 1816 	cjne	a,ar3,00118$
      0002FA 90 27 10         [24] 1817 	mov	dptr,#0x2710
      0002FD E4               [12] 1818 	clr	a
      0002FE F5 F0            [12] 1819 	mov	b,a
      000300 C0 07            [24] 1820 	push	ar7
      000302 C0 06            [24] 1821 	push	ar6
      000304 C0 05            [24] 1822 	push	ar5
      000306 C0 03            [24] 1823 	push	ar3
      000308 12r03r23         [24] 1824 	lcall	_delay_time
      00030B D0 03            [24] 1825 	pop	ar3
      00030D D0 05            [24] 1826 	pop	ar5
      00030F D0 06            [24] 1827 	pop	ar6
      000311 D0 07            [24] 1828 	pop	ar7
      000313 80 CC            [24] 1829 	sjmp	00110$
      000315                       1830 00118$:
                           000315  1831 	C$i2c.h$167$1$89 ==.
                                   1832 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000315 0F               [12] 1833 	inc	r7
      000316 BF 05 00         [24] 1834 	cjne	r7,#0x05,00155$
      000319                       1835 00155$:
      000319 50 03            [24] 1836 	jnc	00156$
      00031B 02r02r25         [24] 1837 	ljmp	00104$
      00031E                       1838 00156$:
                           00031E  1839 	C$i2c.h$182$1$89 ==.
                                   1840 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:182: return sum;
      00031E 8D 82            [24] 1841 	mov	dpl,r5
      000320 8E 83            [24] 1842 	mov	dph,r6
      000322                       1843 00119$:
                           000322  1844 	C$i2c.h$183$1$89 ==.
                           000322  1845 	XG$kpd_input$0$0 ==.
      000322 22               [24] 1846 	ret
                                   1847 ;------------------------------------------------------------
                                   1848 ;Allocation info for local variables in function 'delay_time'
                                   1849 ;------------------------------------------------------------
                                   1850 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1851 ;index                     Allocated to registers 
                                   1852 ;------------------------------------------------------------
                           000323  1853 	G$delay_time$0$0 ==.
                           000323  1854 	C$i2c.h$192$1$89 ==.
                                   1855 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:192: void delay_time (unsigned long time_end)
                                   1856 ;	-----------------------------------------
                                   1857 ;	 function delay_time
                                   1858 ;	-----------------------------------------
      000323                       1859 _delay_time:
      000323 AC 82            [24] 1860 	mov	r4,dpl
      000325 AD 83            [24] 1861 	mov	r5,dph
      000327 AE F0            [24] 1862 	mov	r6,b
      000329 FF               [12] 1863 	mov	r7,a
                           00032A  1864 	C$i2c.h$195$1$94 ==.
                                   1865 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:195: for (index = 0; index < time_end; index++); //for loop delay
      00032A 78 00            [12] 1866 	mov	r0,#0x00
      00032C 79 00            [12] 1867 	mov	r1,#0x00
      00032E 7A 00            [12] 1868 	mov	r2,#0x00
      000330 7B 00            [12] 1869 	mov	r3,#0x00
      000332                       1870 00103$:
      000332 C3               [12] 1871 	clr	c
      000333 E8               [12] 1872 	mov	a,r0
      000334 9C               [12] 1873 	subb	a,r4
      000335 E9               [12] 1874 	mov	a,r1
      000336 9D               [12] 1875 	subb	a,r5
      000337 EA               [12] 1876 	mov	a,r2
      000338 9E               [12] 1877 	subb	a,r6
      000339 EB               [12] 1878 	mov	a,r3
      00033A 9F               [12] 1879 	subb	a,r7
      00033B 50 0F            [24] 1880 	jnc	00105$
      00033D 08               [12] 1881 	inc	r0
      00033E B8 00 09         [24] 1882 	cjne	r0,#0x00,00115$
      000341 09               [12] 1883 	inc	r1
      000342 B9 00 05         [24] 1884 	cjne	r1,#0x00,00115$
      000345 0A               [12] 1885 	inc	r2
      000346 BA 00 E9         [24] 1886 	cjne	r2,#0x00,00103$
      000349 0B               [12] 1887 	inc	r3
      00034A                       1888 00115$:
      00034A 80 E6            [24] 1889 	sjmp	00103$
      00034C                       1890 00105$:
                           00034C  1891 	C$i2c.h$196$1$94 ==.
                           00034C  1892 	XG$delay_time$0$0 ==.
      00034C 22               [24] 1893 	ret
                                   1894 ;------------------------------------------------------------
                                   1895 ;Allocation info for local variables in function 'i2c_start'
                                   1896 ;------------------------------------------------------------
                           00034D  1897 	G$i2c_start$0$0 ==.
                           00034D  1898 	C$i2c.h$199$1$94 ==.
                                   1899 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:199: void i2c_start(void)
                                   1900 ;	-----------------------------------------
                                   1901 ;	 function i2c_start
                                   1902 ;	-----------------------------------------
      00034D                       1903 _i2c_start:
                           00034D  1904 	C$i2c.h$201$1$96 ==.
                                   1905 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:201: while(BUSY);              //Wait until SMBus0 is free
      00034D                       1906 00101$:
      00034D 20 C7 FD         [24] 1907 	jb	_BUSY,00101$
                           000350  1908 	C$i2c.h$202$1$96 ==.
                                   1909 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:202: STA = 1;                  //Set Start Bit
      000350 D2 C5            [12] 1910 	setb	_STA
                           000352  1911 	C$i2c.h$203$1$96 ==.
                                   1912 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:203: while(!SI);               //Wait until start sent
      000352                       1913 00104$:
      000352 30 C3 FD         [24] 1914 	jnb	_SI,00104$
                           000355  1915 	C$i2c.h$204$1$96 ==.
                                   1916 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:204: STA = 0;                  //Clear start bit
      000355 C2 C5            [12] 1917 	clr	_STA
                           000357  1918 	C$i2c.h$205$1$96 ==.
                                   1919 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:205: SI = 0;                   //Clear SI
      000357 C2 C3            [12] 1920 	clr	_SI
                           000359  1921 	C$i2c.h$206$1$96 ==.
                           000359  1922 	XG$i2c_start$0$0 ==.
      000359 22               [24] 1923 	ret
                                   1924 ;------------------------------------------------------------
                                   1925 ;Allocation info for local variables in function 'i2c_write'
                                   1926 ;------------------------------------------------------------
                                   1927 ;output_data               Allocated to registers 
                                   1928 ;------------------------------------------------------------
                           00035A  1929 	G$i2c_write$0$0 ==.
                           00035A  1930 	C$i2c.h$209$1$96 ==.
                                   1931 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:209: void i2c_write(unsigned char output_data)
                                   1932 ;	-----------------------------------------
                                   1933 ;	 function i2c_write
                                   1934 ;	-----------------------------------------
      00035A                       1935 _i2c_write:
      00035A 85 82 C2         [24] 1936 	mov	_SMB0DAT,dpl
                           00035D  1937 	C$i2c.h$212$1$98 ==.
                                   1938 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:212: while(!SI);               //Wait until send is complete
      00035D                       1939 00101$:
                           00035D  1940 	C$i2c.h$213$1$98 ==.
                                   1941 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:213: SI = 0;                   //Clear SI
      00035D 10 C3 02         [24] 1942 	jbc	_SI,00112$
      000360 80 FB            [24] 1943 	sjmp	00101$
      000362                       1944 00112$:
                           000362  1945 	C$i2c.h$214$1$98 ==.
                           000362  1946 	XG$i2c_write$0$0 ==.
      000362 22               [24] 1947 	ret
                                   1948 ;------------------------------------------------------------
                                   1949 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   1950 ;------------------------------------------------------------
                                   1951 ;output_data               Allocated to registers 
                                   1952 ;------------------------------------------------------------
                           000363  1953 	G$i2c_write_and_stop$0$0 ==.
                           000363  1954 	C$i2c.h$217$1$98 ==.
                                   1955 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:217: void i2c_write_and_stop(unsigned char output_data)
                                   1956 ;	-----------------------------------------
                                   1957 ;	 function i2c_write_and_stop
                                   1958 ;	-----------------------------------------
      000363                       1959 _i2c_write_and_stop:
      000363 85 82 C2         [24] 1960 	mov	_SMB0DAT,dpl
                           000366  1961 	C$i2c.h$220$1$100 ==.
                                   1962 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:220: STO = 1;                  //Set stop bit
      000366 D2 C4            [12] 1963 	setb	_STO
                           000368  1964 	C$i2c.h$221$1$100 ==.
                                   1965 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:221: while(!SI);               //Wait until send is complete
      000368                       1966 00101$:
                           000368  1967 	C$i2c.h$222$1$100 ==.
                                   1968 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:222: SI = 0;                   //clear SI
      000368 10 C3 02         [24] 1969 	jbc	_SI,00112$
      00036B 80 FB            [24] 1970 	sjmp	00101$
      00036D                       1971 00112$:
                           00036D  1972 	C$i2c.h$223$1$100 ==.
                           00036D  1973 	XG$i2c_write_and_stop$0$0 ==.
      00036D 22               [24] 1974 	ret
                                   1975 ;------------------------------------------------------------
                                   1976 ;Allocation info for local variables in function 'i2c_read'
                                   1977 ;------------------------------------------------------------
                                   1978 ;input_data                Allocated to registers 
                                   1979 ;------------------------------------------------------------
                           00036E  1980 	G$i2c_read$0$0 ==.
                           00036E  1981 	C$i2c.h$226$1$100 ==.
                                   1982 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:226: unsigned char i2c_read(void)
                                   1983 ;	-----------------------------------------
                                   1984 ;	 function i2c_read
                                   1985 ;	-----------------------------------------
      00036E                       1986 _i2c_read:
                           00036E  1987 	C$i2c.h$229$1$102 ==.
                                   1988 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:229: while(!SI);                //Wait until we have data to read
      00036E                       1989 00101$:
      00036E 30 C3 FD         [24] 1990 	jnb	_SI,00101$
                           000371  1991 	C$i2c.h$230$1$102 ==.
                                   1992 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:230: input_data = SMB0DAT;      //Read the data
      000371 85 C2 82         [24] 1993 	mov	dpl,_SMB0DAT
                           000374  1994 	C$i2c.h$231$1$102 ==.
                                   1995 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:231: SI = 0;                    //Clear SI
      000374 C2 C3            [12] 1996 	clr	_SI
                           000376  1997 	C$i2c.h$232$1$102 ==.
                                   1998 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:232: return input_data;         //Return the read data
                           000376  1999 	C$i2c.h$233$1$102 ==.
                           000376  2000 	XG$i2c_read$0$0 ==.
      000376 22               [24] 2001 	ret
                                   2002 ;------------------------------------------------------------
                                   2003 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2004 ;------------------------------------------------------------
                                   2005 ;input_data                Allocated to registers r7 
                                   2006 ;------------------------------------------------------------
                           000377  2007 	G$i2c_read_and_stop$0$0 ==.
                           000377  2008 	C$i2c.h$236$1$102 ==.
                                   2009 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:236: unsigned char i2c_read_and_stop(void)
                                   2010 ;	-----------------------------------------
                                   2011 ;	 function i2c_read_and_stop
                                   2012 ;	-----------------------------------------
      000377                       2013 _i2c_read_and_stop:
                           000377  2014 	C$i2c.h$239$1$104 ==.
                                   2015 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:239: while(!SI);                //Wait until we have data to read
      000377                       2016 00101$:
      000377 30 C3 FD         [24] 2017 	jnb	_SI,00101$
                           00037A  2018 	C$i2c.h$240$1$104 ==.
                                   2019 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:240: input_data = SMB0DAT;      //Read the data
      00037A AF C2            [24] 2020 	mov	r7,_SMB0DAT
                           00037C  2021 	C$i2c.h$241$1$104 ==.
                                   2022 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;                    //Clear SI
      00037C C2 C3            [12] 2023 	clr	_SI
                           00037E  2024 	C$i2c.h$242$1$104 ==.
                                   2025 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:242: STO = 1;                   //Set stop bit
      00037E D2 C4            [12] 2026 	setb	_STO
                           000380  2027 	C$i2c.h$243$1$104 ==.
                                   2028 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:243: while(!SI);                //Wait for stop
      000380                       2029 00104$:
                           000380  2030 	C$i2c.h$244$1$104 ==.
                                   2031 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:244: SI = 0;
      000380 10 C3 02         [24] 2032 	jbc	_SI,00122$
      000383 80 FB            [24] 2033 	sjmp	00104$
      000385                       2034 00122$:
                           000385  2035 	C$i2c.h$245$1$104 ==.
                                   2036 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:245: return input_data;         //Return the read data
      000385 8F 82            [24] 2037 	mov	dpl,r7
                           000387  2038 	C$i2c.h$246$1$104 ==.
                           000387  2039 	XG$i2c_read_and_stop$0$0 ==.
      000387 22               [24] 2040 	ret
                                   2041 ;------------------------------------------------------------
                                   2042 ;Allocation info for local variables in function 'i2c_write_data'
                                   2043 ;------------------------------------------------------------
                                   2044 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2045 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2046 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2047 ;addr                      Allocated to registers r7 
                                   2048 ;i                         Allocated to registers 
                                   2049 ;------------------------------------------------------------
                           000388  2050 	G$i2c_write_data$0$0 ==.
                           000388  2051 	C$i2c.h$249$1$104 ==.
                                   2052 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:249: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2053 ;	-----------------------------------------
                                   2054 ;	 function i2c_write_data
                                   2055 ;	-----------------------------------------
      000388                       2056 _i2c_write_data:
      000388 AF 82            [24] 2057 	mov	r7,dpl
                           00038A  2058 	C$i2c.h$253$1$106 ==.
                                   2059 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:253: i2c_start();               //initiate I2C transfer
      00038A C0 07            [24] 2060 	push	ar7
      00038C 12r03r4D         [24] 2061 	lcall	_i2c_start
      00038F D0 07            [24] 2062 	pop	ar7
                           000391  2063 	C$i2c.h$254$1$106 ==.
                                   2064 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(addr & ~0x01);   //write the desired address to the bus
      000391 74 FE            [12] 2065 	mov	a,#0xfe
      000393 5F               [12] 2066 	anl	a,r7
      000394 F5 82            [12] 2067 	mov	dpl,a
      000396 12r03r5A         [24] 2068 	lcall	_i2c_write
                           000399  2069 	C$i2c.h$255$1$106 ==.
                                   2070 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write(start_reg);      //write the start register to the bus
      000399 85*0A 82         [24] 2071 	mov	dpl,_i2c_write_data_PARM_2
      00039C 12r03r5A         [24] 2072 	lcall	_i2c_write
                           00039F  2073 	C$i2c.h$256$1$106 ==.
                                   2074 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:256: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      00039F 7F 00            [12] 2075 	mov	r7,#0x00
      0003A1                       2076 00103$:
      0003A1 AD*0E            [24] 2077 	mov	r5,_i2c_write_data_PARM_4
      0003A3 7E 00            [12] 2078 	mov	r6,#0x00
      0003A5 1D               [12] 2079 	dec	r5
      0003A6 BD FF 01         [24] 2080 	cjne	r5,#0xff,00114$
      0003A9 1E               [12] 2081 	dec	r6
      0003AA                       2082 00114$:
      0003AA 8F 03            [24] 2083 	mov	ar3,r7
      0003AC 7C 00            [12] 2084 	mov	r4,#0x00
      0003AE C3               [12] 2085 	clr	c
      0003AF EB               [12] 2086 	mov	a,r3
      0003B0 9D               [12] 2087 	subb	a,r5
      0003B1 EC               [12] 2088 	mov	a,r4
      0003B2 64 80            [12] 2089 	xrl	a,#0x80
      0003B4 8E F0            [24] 2090 	mov	b,r6
      0003B6 63 F0 80         [24] 2091 	xrl	b,#0x80
      0003B9 95 F0            [12] 2092 	subb	a,b
      0003BB 50 1F            [24] 2093 	jnc	00101$
                           0003BD  2094 	C$i2c.h$257$1$106 ==.
                                   2095 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:257: i2c_write(buffer[i]);
      0003BD EF               [12] 2096 	mov	a,r7
      0003BE 25*0B            [12] 2097 	add	a,_i2c_write_data_PARM_3
      0003C0 FC               [12] 2098 	mov	r4,a
      0003C1 E4               [12] 2099 	clr	a
      0003C2 35*0C            [12] 2100 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003C4 FD               [12] 2101 	mov	r5,a
      0003C5 AE*0D            [24] 2102 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003C7 8C 82            [24] 2103 	mov	dpl,r4
      0003C9 8D 83            [24] 2104 	mov	dph,r5
      0003CB 8E F0            [24] 2105 	mov	b,r6
      0003CD 12r00r00         [24] 2106 	lcall	__gptrget
      0003D0 F5 82            [12] 2107 	mov	dpl,a
      0003D2 C0 07            [24] 2108 	push	ar7
      0003D4 12r03r5A         [24] 2109 	lcall	_i2c_write
      0003D7 D0 07            [24] 2110 	pop	ar7
                           0003D9  2111 	C$i2c.h$256$1$106 ==.
                                   2112 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:256: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003D9 0F               [12] 2113 	inc	r7
      0003DA 80 C5            [24] 2114 	sjmp	00103$
      0003DC                       2115 00101$:
                           0003DC  2116 	C$i2c.h$258$1$106 ==.
                                   2117 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:258: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003DC AE*0E            [24] 2118 	mov	r6,_i2c_write_data_PARM_4
      0003DE 7F 00            [12] 2119 	mov	r7,#0x00
      0003E0 1E               [12] 2120 	dec	r6
      0003E1 BE FF 01         [24] 2121 	cjne	r6,#0xff,00116$
      0003E4 1F               [12] 2122 	dec	r7
      0003E5                       2123 00116$:
      0003E5 EE               [12] 2124 	mov	a,r6
      0003E6 25*0B            [12] 2125 	add	a,_i2c_write_data_PARM_3
      0003E8 FE               [12] 2126 	mov	r6,a
      0003E9 EF               [12] 2127 	mov	a,r7
      0003EA 35*0C            [12] 2128 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003EC FF               [12] 2129 	mov	r7,a
      0003ED AD*0D            [24] 2130 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003EF 8E 82            [24] 2131 	mov	dpl,r6
      0003F1 8F 83            [24] 2132 	mov	dph,r7
      0003F3 8D F0            [24] 2133 	mov	b,r5
      0003F5 12r00r00         [24] 2134 	lcall	__gptrget
      0003F8 F5 82            [12] 2135 	mov	dpl,a
      0003FA 12r03r63         [24] 2136 	lcall	_i2c_write_and_stop
                           0003FD  2137 	C$i2c.h$259$1$106 ==.
                           0003FD  2138 	XG$i2c_write_data$0$0 ==.
      0003FD 22               [24] 2139 	ret
                                   2140 ;------------------------------------------------------------
                                   2141 ;Allocation info for local variables in function 'i2c_read_data'
                                   2142 ;------------------------------------------------------------
                                   2143 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2144 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2145 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2146 ;addr                      Allocated to registers r7 
                                   2147 ;j                         Allocated to registers 
                                   2148 ;------------------------------------------------------------
                           0003FE  2149 	G$i2c_read_data$0$0 ==.
                           0003FE  2150 	C$i2c.h$262$1$106 ==.
                                   2151 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:262: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2152 ;	-----------------------------------------
                                   2153 ;	 function i2c_read_data
                                   2154 ;	-----------------------------------------
      0003FE                       2155 _i2c_read_data:
      0003FE AF 82            [24] 2156 	mov	r7,dpl
                           000400  2157 	C$i2c.h$265$1$108 ==.
                                   2158 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000400 C0 07            [24] 2159 	push	ar7
      000402 12r03r4D         [24] 2160 	lcall	_i2c_start
      000405 D0 07            [24] 2161 	pop	ar7
                           000407  2162 	C$i2c.h$266$1$108 ==.
                                   2163 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      000407 74 FE            [12] 2164 	mov	a,#0xfe
      000409 5F               [12] 2165 	anl	a,r7
      00040A F5 82            [12] 2166 	mov	dpl,a
      00040C C0 07            [24] 2167 	push	ar7
      00040E 12r03r5A         [24] 2168 	lcall	_i2c_write
                           000411  2169 	C$i2c.h$267$1$108 ==.
                                   2170 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:267: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      000411 85*0F 82         [24] 2171 	mov	dpl,_i2c_read_data_PARM_2
      000414 12r03r63         [24] 2172 	lcall	_i2c_write_and_stop
                           000417  2173 	C$i2c.h$268$1$108 ==.
                                   2174 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:268: i2c_start();               //Start I2C transfer
      000417 12r03r4D         [24] 2175 	lcall	_i2c_start
      00041A D0 07            [24] 2176 	pop	ar7
                           00041C  2177 	C$i2c.h$269$1$108 ==.
                                   2178 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:269: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      00041C 74 01            [12] 2179 	mov	a,#0x01
      00041E 4F               [12] 2180 	orl	a,r7
      00041F F5 82            [12] 2181 	mov	dpl,a
      000421 12r03r5A         [24] 2182 	lcall	_i2c_write
                           000424  2183 	C$i2c.h$270$1$108 ==.
                                   2184 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:270: for(j = 0; j < num_bytes - 1; j++)
      000424 7F 00            [12] 2185 	mov	r7,#0x00
      000426                       2186 00103$:
      000426 AD*13            [24] 2187 	mov	r5,_i2c_read_data_PARM_4
      000428 7E 00            [12] 2188 	mov	r6,#0x00
      00042A 1D               [12] 2189 	dec	r5
      00042B BD FF 01         [24] 2190 	cjne	r5,#0xff,00114$
      00042E 1E               [12] 2191 	dec	r6
      00042F                       2192 00114$:
      00042F 8F 03            [24] 2193 	mov	ar3,r7
      000431 7C 00            [12] 2194 	mov	r4,#0x00
      000433 C3               [12] 2195 	clr	c
      000434 EB               [12] 2196 	mov	a,r3
      000435 9D               [12] 2197 	subb	a,r5
      000436 EC               [12] 2198 	mov	a,r4
      000437 64 80            [12] 2199 	xrl	a,#0x80
      000439 8E F0            [24] 2200 	mov	b,r6
      00043B 63 F0 80         [24] 2201 	xrl	b,#0x80
      00043E 95 F0            [12] 2202 	subb	a,b
      000440 50 2E            [24] 2203 	jnc	00101$
                           000442  2204 	C$i2c.h$272$2$109 ==.
                                   2205 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:272: AA = 1;                //Set acknowledge bit
      000442 D2 C2            [12] 2206 	setb	_AA
                           000444  2207 	C$i2c.h$273$2$109 ==.
                                   2208 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:273: buffer[j] = i2c_read();//Read data, save it in buffer
      000444 EF               [12] 2209 	mov	a,r7
      000445 25*10            [12] 2210 	add	a,_i2c_read_data_PARM_3
      000447 FC               [12] 2211 	mov	r4,a
      000448 E4               [12] 2212 	clr	a
      000449 35*11            [12] 2213 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00044B FD               [12] 2214 	mov	r5,a
      00044C AE*12            [24] 2215 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00044E C0 07            [24] 2216 	push	ar7
      000450 C0 06            [24] 2217 	push	ar6
      000452 C0 05            [24] 2218 	push	ar5
      000454 C0 04            [24] 2219 	push	ar4
      000456 12r03r6E         [24] 2220 	lcall	_i2c_read
      000459 AB 82            [24] 2221 	mov	r3,dpl
      00045B D0 04            [24] 2222 	pop	ar4
      00045D D0 05            [24] 2223 	pop	ar5
      00045F D0 06            [24] 2224 	pop	ar6
      000461 D0 07            [24] 2225 	pop	ar7
      000463 8C 82            [24] 2226 	mov	dpl,r4
      000465 8D 83            [24] 2227 	mov	dph,r5
      000467 8E F0            [24] 2228 	mov	b,r6
      000469 EB               [12] 2229 	mov	a,r3
      00046A 12r00r00         [24] 2230 	lcall	__gptrput
                           00046D  2231 	C$i2c.h$270$1$108 ==.
                                   2232 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:270: for(j = 0; j < num_bytes - 1; j++)
      00046D 0F               [12] 2233 	inc	r7
      00046E 80 B6            [24] 2234 	sjmp	00103$
      000470                       2235 00101$:
                           000470  2236 	C$i2c.h$275$1$108 ==.
                                   2237 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:275: AA = 0;
      000470 C2 C2            [12] 2238 	clr	_AA
                           000472  2239 	C$i2c.h$276$1$108 ==.
                                   2240 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:276: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      000472 AE*13            [24] 2241 	mov	r6,_i2c_read_data_PARM_4
      000474 7F 00            [12] 2242 	mov	r7,#0x00
      000476 1E               [12] 2243 	dec	r6
      000477 BE FF 01         [24] 2244 	cjne	r6,#0xff,00116$
      00047A 1F               [12] 2245 	dec	r7
      00047B                       2246 00116$:
      00047B EE               [12] 2247 	mov	a,r6
      00047C 25*10            [12] 2248 	add	a,_i2c_read_data_PARM_3
      00047E FE               [12] 2249 	mov	r6,a
      00047F EF               [12] 2250 	mov	a,r7
      000480 35*11            [12] 2251 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000482 FF               [12] 2252 	mov	r7,a
      000483 AD*12            [24] 2253 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000485 C0 07            [24] 2254 	push	ar7
      000487 C0 06            [24] 2255 	push	ar6
      000489 C0 05            [24] 2256 	push	ar5
      00048B 12r03r77         [24] 2257 	lcall	_i2c_read_and_stop
      00048E AC 82            [24] 2258 	mov	r4,dpl
      000490 D0 05            [24] 2259 	pop	ar5
      000492 D0 06            [24] 2260 	pop	ar6
      000494 D0 07            [24] 2261 	pop	ar7
      000496 8E 82            [24] 2262 	mov	dpl,r6
      000498 8F 83            [24] 2263 	mov	dph,r7
      00049A 8D F0            [24] 2264 	mov	b,r5
      00049C EC               [12] 2265 	mov	a,r4
      00049D 12r00r00         [24] 2266 	lcall	__gptrput
                           0004A0  2267 	C$i2c.h$277$1$108 ==.
                           0004A0  2268 	XG$i2c_read_data$0$0 ==.
      0004A0 22               [24] 2269 	ret
                                   2270 ;------------------------------------------------------------
                                   2271 ;Allocation info for local variables in function 'Accel_Init'
                                   2272 ;------------------------------------------------------------
                           0004A1  2273 	G$Accel_Init$0$0 ==.
                           0004A1  2274 	C$i2c.h$286$1$108 ==.
                                   2275 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:286: void Accel_Init(void)
                                   2276 ;	-----------------------------------------
                                   2277 ;	 function Accel_Init
                                   2278 ;	-----------------------------------------
      0004A1                       2279 _Accel_Init:
                           0004A1  2280 	C$i2c.h$290$1$111 ==.
                                   2281 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      0004A1 75*00 23         [24] 2282 	mov	_Data2,#0x23
                           0004A4  2283 	C$i2c.h$292$1$111 ==.
                                   2284 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:292: Data2[1]=0x00;	//Default - no filtering
      0004A4 75*01 00         [24] 2285 	mov	(_Data2 + 0x0001),#0x00
                           0004A7  2286 	C$i2c.h$293$1$111 ==.
                                   2287 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:293: Data2[1]=0x10;	//filtered data selected, HPF = 1.0->0.125Hz
      0004A7 75*01 10         [24] 2288 	mov	(_Data2 + 0x0001),#0x10
                           0004AA  2289 	C$i2c.h$294$1$111 ==.
                                   2290 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:294: Data2[2]=0x00;	//default - no interrupts enabled
      0004AA 75*02 00         [24] 2291 	mov	(_Data2 + 0x0002),#0x00
                           0004AD  2292 	C$i2c.h$296$1$111 ==.
                                   2293 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:296: i2c_write_data(addr_accel, 0x20, Data2, 1);
      0004AD 75*0Br00         [24] 2294 	mov	_i2c_write_data_PARM_3,#_Data2
      0004B0 75*0C 00         [24] 2295 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004B3 75*0D 40         [24] 2296 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B6 75*0A 20         [24] 2297 	mov	_i2c_write_data_PARM_2,#0x20
      0004B9 75*0E 01         [24] 2298 	mov	_i2c_write_data_PARM_4,#0x01
      0004BC 75 82 30         [24] 2299 	mov	dpl,#0x30
      0004BF 12r03r88         [24] 2300 	lcall	_i2c_write_data
                           0004C2  2301 	C$i2c.h$302$1$111 ==.
                           0004C2  2302 	XG$Accel_Init$0$0 ==.
      0004C2 22               [24] 2303 	ret
                                   2304 ;------------------------------------------------------------
                                   2305 ;Allocation info for local variables in function 'Accel_Init_C'
                                   2306 ;------------------------------------------------------------
                           0004C3  2307 	G$Accel_Init_C$0$0 ==.
                           0004C3  2308 	C$i2c.h$305$1$111 ==.
                                   2309 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:305: void Accel_Init_C(void)
                                   2310 ;	-----------------------------------------
                                   2311 ;	 function Accel_Init_C
                                   2312 ;	-----------------------------------------
      0004C3                       2313 _Accel_Init_C:
                           0004C3  2314 	C$i2c.h$310$1$113 ==.
                                   2315 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:310: Data2[0]=0x04;	//set register address auto increment bit 
      0004C3 75*00 04         [24] 2316 	mov	_Data2,#0x04
                           0004C6  2317 	C$i2c.h$311$1$113 ==.
                                   2318 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:311: i2c_write_data(addr_accelC, 0x23, Data2, 1);
      0004C6 75*0Br00         [24] 2319 	mov	_i2c_write_data_PARM_3,#_Data2
      0004C9 75*0C 00         [24] 2320 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004CC 75*0D 40         [24] 2321 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004CF 75*0A 23         [24] 2322 	mov	_i2c_write_data_PARM_2,#0x23
      0004D2 75*0E 01         [24] 2323 	mov	_i2c_write_data_PARM_4,#0x01
      0004D5 75 82 3A         [24] 2324 	mov	dpl,#0x3a
      0004D8 12r03r88         [24] 2325 	lcall	_i2c_write_data
                           0004DB  2326 	C$i2c.h$313$1$113 ==.
                                   2327 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:313: Data2[0]=0x6B;	//R20 normal power mode, 800Hz ODR, y & x axes enabled
      0004DB 75*00 6B         [24] 2328 	mov	_Data2,#0x6b
                           0004DE  2329 	C$i2c.h$315$1$113 ==.
                                   2330 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:315: Data2[1]=0x00;	//R21 Default - no HP filtering
      0004DE 75*01 00         [24] 2331 	mov	(_Data2 + 0x0001),#0x00
                           0004E1  2332 	C$i2c.h$317$1$113 ==.
                                   2333 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:317: Data2[2]=0x00;	//R22 Default - no interrupts enabled
      0004E1 75*02 00         [24] 2334 	mov	(_Data2 + 0x0002),#0x00
                           0004E4  2335 	C$i2c.h$318$1$113 ==.
                                   2336 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:318: i2c_write_data(addr_accelC, 0x20, Data2, 1);
      0004E4 75*0Br00         [24] 2337 	mov	_i2c_write_data_PARM_3,#_Data2
      0004E7 75*0C 00         [24] 2338 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004EA 75*0D 40         [24] 2339 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004ED 75*0A 20         [24] 2340 	mov	_i2c_write_data_PARM_2,#0x20
      0004F0 75*0E 01         [24] 2341 	mov	_i2c_write_data_PARM_4,#0x01
      0004F3 75 82 3A         [24] 2342 	mov	dpl,#0x3a
      0004F6 12r03r88         [24] 2343 	lcall	_i2c_write_data
                           0004F9  2344 	C$i2c.h$320$1$113 ==.
                           0004F9  2345 	XG$Accel_Init_C$0$0 ==.
      0004F9 22               [24] 2346 	ret
                                   2347 ;------------------------------------------------------------
                                   2348 ;Allocation info for local variables in function 'main'
                                   2349 ;------------------------------------------------------------
                           0004FA  2350 	G$main$0$0 ==.
                           0004FA  2351 	C$lab3_2.c$50$1$113 ==.
                                   2352 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:50: void main(void){
                                   2353 ;	-----------------------------------------
                                   2354 ;	 function main
                                   2355 ;	-----------------------------------------
      0004FA                       2356 _main:
                           0004FA  2357 	C$lab3_2.c$52$1$123 ==.
                                   2358 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:52: Sys_Init();
      0004FA 12r00r37         [24] 2359 	lcall	_Sys_Init
                           0004FD  2360 	C$lab3_2.c$53$1$123 ==.
                                   2361 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:53: putchar(' '); //the quotes in this line may not format correctly
      0004FD 75 82 20         [24] 2362 	mov	dpl,#0x20
      000500 12r00r4A         [24] 2363 	lcall	_putchar
                           000503  2364 	C$lab3_2.c$54$1$123 ==.
                                   2365 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:54: Port_Init();
      000503 12r05r96         [24] 2366 	lcall	_Port_Init
                           000506  2367 	C$lab3_2.c$55$1$123 ==.
                                   2368 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:55: XBR0_Init();
      000506 12r05r9D         [24] 2369 	lcall	_XBR0_Init
                           000509  2370 	C$lab3_2.c$56$1$123 ==.
                                   2371 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:56: PCA_Init();
      000509 12r05rA1         [24] 2372 	lcall	_PCA_Init
                           00050C  2373 	C$lab3_2.c$57$1$123 ==.
                                   2374 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:57: SMB_Init();
      00050C 12r05rB3         [24] 2375 	lcall	_SMB_Init
                           00050F  2376 	C$lab3_2.c$60$1$123 ==.
                                   2377 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:60: printf("\rEmbedded Control Steering Calibration\n");
      00050F 74r29            [12] 2378 	mov	a,#___str_3
      000511 C0 E0            [24] 2379 	push	acc
      000513 74s00            [12] 2380 	mov	a,#(___str_3 >> 8)
      000515 C0 E0            [24] 2381 	push	acc
      000517 74 80            [12] 2382 	mov	a,#0x80
      000519 C0 E0            [24] 2383 	push	acc
      00051B 12r00r00         [24] 2384 	lcall	_printf
      00051E 15 81            [12] 2385 	dec	sp
      000520 15 81            [12] 2386 	dec	sp
      000522 15 81            [12] 2387 	dec	sp
                           000524  2388 	C$lab3_2.c$62$1$123 ==.
                                   2389 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:62: PW_m = PW_CENTER;
      000524 85*23*25         [24] 2390 	mov	_PW_m,_PW_CENTER
      000527 85*24*26         [24] 2391 	mov	(_PW_m + 1),(_PW_CENTER + 1)
                           00052A  2392 	C$lab3_2.c$63$1$123 ==.
                                   2393 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:63: PCA0CP0 = 0xFFFF - PW_m;
      00052A 74 FF            [12] 2394 	mov	a,#0xff
      00052C C3               [12] 2395 	clr	c
      00052D 95*25            [12] 2396 	subb	a,_PW_m
      00052F F5 EA            [12] 2397 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      000531 74 FF            [12] 2398 	mov	a,#0xff
      000533 95*26            [12] 2399 	subb	a,(_PW_m + 1)
      000535 F5 FA            [12] 2400 	mov	((_PCA0CP0 >> 8) & 0xFF),a
                           000537  2401 	C$lab3_2.c$65$1$123 ==.
                                   2402 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:65: while(1){
      000537                       2403 00106$:
                           000537  2404 	C$lab3_2.c$66$2$124 ==.
                                   2405 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:66: startPing();
      000537 12r06r10         [24] 2406 	lcall	_startPing
                           00053A  2407 	C$lab3_2.c$67$2$124 ==.
                                   2408 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:67: wait();
      00053A 12r06r2C         [24] 2409 	lcall	_wait
                           00053D  2410 	C$lab3_2.c$68$2$124 ==.
                                   2411 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:68: if(new_heading){
      00053D E5*16            [12] 2412 	mov	a,_new_heading
      00053F 60 25            [24] 2413 	jz	00102$
                           000541  2414 	C$lab3_2.c$69$3$125 ==.
                                   2415 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:69: new_heading = 0;
      000541 75*16 00         [24] 2416 	mov	_new_heading,#0x00
                           000544  2417 	C$lab3_2.c$70$3$125 ==.
                                   2418 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:70: heading = ReadCompass();
      000544 12r06r5C         [24] 2419 	lcall	_ReadCompass
      000547 85 82*17         [24] 2420 	mov	_heading,dpl
      00054A 85 83*18         [24] 2421 	mov	(_heading + 1),dph
                           00054D  2422 	C$lab3_2.c$71$3$125 ==.
                                   2423 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:71: printf("\rHeading: %d\n", heading);
      00054D C0*17            [24] 2424 	push	_heading
      00054F C0*18            [24] 2425 	push	(_heading + 1)
      000551 74r51            [12] 2426 	mov	a,#___str_4
      000553 C0 E0            [24] 2427 	push	acc
      000555 74s00            [12] 2428 	mov	a,#(___str_4 >> 8)
      000557 C0 E0            [24] 2429 	push	acc
      000559 74 80            [12] 2430 	mov	a,#0x80
      00055B C0 E0            [24] 2431 	push	acc
      00055D 12r00r00         [24] 2432 	lcall	_printf
      000560 E5 81            [12] 2433 	mov	a,sp
      000562 24 FB            [12] 2434 	add	a,#0xfb
      000564 F5 81            [12] 2435 	mov	sp,a
      000566                       2436 00102$:
                           000566  2437 	C$lab3_2.c$73$2$124 ==.
                                   2438 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:73: if(new_range){
      000566 E5*1D            [12] 2439 	mov	a,_new_range
      000568 45*1E            [12] 2440 	orl	a,(_new_range + 1)
      00056A 60 CB            [24] 2441 	jz	00106$
                           00056C  2442 	C$lab3_2.c$74$3$126 ==.
                                   2443 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:74: new_range = 0;
      00056C E4               [12] 2444 	clr	a
      00056D F5*1D            [12] 2445 	mov	_new_range,a
      00056F F5*1E            [12] 2446 	mov	(_new_range + 1),a
                           000571  2447 	C$lab3_2.c$75$3$126 ==.
                                   2448 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:75: range_ = ReadRanger();
      000571 12r06r8F         [24] 2449 	lcall	_ReadRanger
      000574 85 82*1F         [24] 2450 	mov	_range_,dpl
      000577 85 83*20         [24] 2451 	mov	(_range_ + 1),dph
                           00057A  2452 	C$lab3_2.c$76$3$126 ==.
                                   2453 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:76: printf("\rRange: %d\n", range_);
      00057A C0*1F            [24] 2454 	push	_range_
      00057C C0*20            [24] 2455 	push	(_range_ + 1)
      00057E 74r5F            [12] 2456 	mov	a,#___str_5
      000580 C0 E0            [24] 2457 	push	acc
      000582 74s00            [12] 2458 	mov	a,#(___str_5 >> 8)
      000584 C0 E0            [24] 2459 	push	acc
      000586 74 80            [12] 2460 	mov	a,#0x80
      000588 C0 E0            [24] 2461 	push	acc
      00058A 12r00r00         [24] 2462 	lcall	_printf
      00058D E5 81            [12] 2463 	mov	a,sp
      00058F 24 FB            [12] 2464 	add	a,#0xfb
      000591 F5 81            [12] 2465 	mov	sp,a
      000593 80 A2            [24] 2466 	sjmp	00106$
                           000595  2467 	C$lab3_2.c$79$1$123 ==.
                           000595  2468 	XG$main$0$0 ==.
      000595 22               [24] 2469 	ret
                                   2470 ;------------------------------------------------------------
                                   2471 ;Allocation info for local variables in function 'Port_Init'
                                   2472 ;------------------------------------------------------------
                           000596  2473 	G$Port_Init$0$0 ==.
                           000596  2474 	C$lab3_2.c$84$1$123 ==.
                                   2475 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:84: void Port_Init(){
                                   2476 ;	-----------------------------------------
                                   2477 ;	 function Port_Init
                                   2478 ;	-----------------------------------------
      000596                       2479 _Port_Init:
                           000596  2480 	C$lab3_2.c$85$1$127 ==.
                                   2481 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:85: P1MDOUT |= 0x01;
      000596 43 A5 01         [24] 2482 	orl	_P1MDOUT,#0x01
                           000599  2483 	C$lab3_2.c$86$1$127 ==.
                                   2484 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:86: P1MDOUT |= 0x04;
      000599 43 A5 04         [24] 2485 	orl	_P1MDOUT,#0x04
                           00059C  2486 	C$lab3_2.c$87$1$127 ==.
                           00059C  2487 	XG$Port_Init$0$0 ==.
      00059C 22               [24] 2488 	ret
                                   2489 ;------------------------------------------------------------
                                   2490 ;Allocation info for local variables in function 'XBR0_Init'
                                   2491 ;------------------------------------------------------------
                           00059D  2492 	G$XBR0_Init$0$0 ==.
                           00059D  2493 	C$lab3_2.c$92$1$127 ==.
                                   2494 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:92: void XBR0_Init(){
                                   2495 ;	-----------------------------------------
                                   2496 ;	 function XBR0_Init
                                   2497 ;	-----------------------------------------
      00059D                       2498 _XBR0_Init:
                           00059D  2499 	C$lab3_2.c$93$1$128 ==.
                                   2500 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:93: XBR0 = 0x27;  //configure crossbar as directed in the laboratory
      00059D 75 E1 27         [24] 2501 	mov	_XBR0,#0x27
                           0005A0  2502 	C$lab3_2.c$95$1$128 ==.
                           0005A0  2503 	XG$XBR0_Init$0$0 ==.
      0005A0 22               [24] 2504 	ret
                                   2505 ;------------------------------------------------------------
                                   2506 ;Allocation info for local variables in function 'PCA_Init'
                                   2507 ;------------------------------------------------------------
                           0005A1  2508 	G$PCA_Init$0$0 ==.
                           0005A1  2509 	C$lab3_2.c$100$1$128 ==.
                                   2510 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:100: void PCA_Init(void){
                                   2511 ;	-----------------------------------------
                                   2512 ;	 function PCA_Init
                                   2513 ;	-----------------------------------------
      0005A1                       2514 _PCA_Init:
                           0005A1  2515 	C$lab3_2.c$101$1$130 ==.
                                   2516 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:101: PCA0CN |= 0x40;    /* Enable PCA counter */
      0005A1 43 D8 40         [24] 2517 	orl	_PCA0CN,#0x40
                           0005A4  2518 	C$lab3_2.c$102$1$130 ==.
                                   2519 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:102: PCA0MD = 0x81;     /* SYSCLK/12, enable CF interrupts, suspend when idle */
      0005A4 75 D9 81         [24] 2520 	mov	_PCA0MD,#0x81
                           0005A7  2521 	C$lab3_2.c$103$1$130 ==.
                                   2522 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:103: PCA0CPM0 = 0xC2;   /* CCM0 in 16-bit compare mode */
      0005A7 75 DA C2         [24] 2523 	mov	_PCA0CPM0,#0xc2
                           0005AA  2524 	C$lab3_2.c$104$1$130 ==.
                                   2525 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:104: PCA0CPM2 = 0XC2;
      0005AA 75 DC C2         [24] 2526 	mov	_PCA0CPM2,#0xc2
                           0005AD  2527 	C$lab3_2.c$105$1$130 ==.
                                   2528 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:105: EIE1 |= 0x08;
      0005AD 43 E6 08         [24] 2529 	orl	_EIE1,#0x08
                           0005B0  2530 	C$lab3_2.c$106$1$130 ==.
                                   2531 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:106: EA = 1;
      0005B0 D2 AF            [12] 2532 	setb	_EA
                           0005B2  2533 	C$lab3_2.c$107$1$130 ==.
                           0005B2  2534 	XG$PCA_Init$0$0 ==.
      0005B2 22               [24] 2535 	ret
                                   2536 ;------------------------------------------------------------
                                   2537 ;Allocation info for local variables in function 'SMB_Init'
                                   2538 ;------------------------------------------------------------
                           0005B3  2539 	G$SMB_Init$0$0 ==.
                           0005B3  2540 	C$lab3_2.c$109$1$130 ==.
                                   2541 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:109: void SMB_Init(void){
                                   2542 ;	-----------------------------------------
                                   2543 ;	 function SMB_Init
                                   2544 ;	-----------------------------------------
      0005B3                       2545 _SMB_Init:
                           0005B3  2546 	C$lab3_2.c$110$1$132 ==.
                                   2547 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:110: SMB0CR = 0x93; //configure ranger and compass
      0005B3 75 CF 93         [24] 2548 	mov	_SMB0CR,#0x93
                           0005B6  2549 	C$lab3_2.c$111$1$132 ==.
                                   2550 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:111: ENSMB = 1;		//enable ranger and compass
      0005B6 D2 C6            [12] 2551 	setb	_ENSMB
                           0005B8  2552 	C$lab3_2.c$112$1$132 ==.
                           0005B8  2553 	XG$SMB_Init$0$0 ==.
      0005B8 22               [24] 2554 	ret
                                   2555 ;------------------------------------------------------------
                                   2556 ;Allocation info for local variables in function 'PCA_ISR'
                                   2557 ;------------------------------------------------------------
                           0005B9  2558 	G$PCA_ISR$0$0 ==.
                           0005B9  2559 	C$lab3_2.c$116$1$132 ==.
                                   2560 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:116: void PCA_ISR ( void ) __interrupt 9{
                                   2561 ;	-----------------------------------------
                                   2562 ;	 function PCA_ISR
                                   2563 ;	-----------------------------------------
      0005B9                       2564 _PCA_ISR:
      0005B9 C0 E0            [24] 2565 	push	acc
      0005BB C0 D0            [24] 2566 	push	psw
                           0005BD  2567 	C$lab3_2.c$119$1$134 ==.
                                   2568 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:119: if(CF){
                           0005BD  2569 	C$lab3_2.c$120$2$135 ==.
                                   2570 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:120: CF = 0;
      0005BD 10 DF 02         [24] 2571 	jbc	_CF,00118$
      0005C0 80 3E            [24] 2572 	sjmp	00106$
      0005C2                       2573 00118$:
                           0005C2  2574 	C$lab3_2.c$121$2$135 ==.
                                   2575 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:121: h_count++;
      0005C2 05*14            [12] 2576 	inc	_h_count
      0005C4 E4               [12] 2577 	clr	a
      0005C5 B5*14 02         [24] 2578 	cjne	a,_h_count,00119$
      0005C8 05*15            [12] 2579 	inc	(_h_count + 1)
      0005CA                       2580 00119$:
                           0005CA  2581 	C$lab3_2.c$122$2$135 ==.
                                   2582 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:122: r_count++;
      0005CA 05*1B            [12] 2583 	inc	_r_count
      0005CC E4               [12] 2584 	clr	a
      0005CD B5*1B 02         [24] 2585 	cjne	a,_r_count,00120$
      0005D0 05*1C            [12] 2586 	inc	(_r_count + 1)
      0005D2                       2587 00120$:
                           0005D2  2588 	C$lab3_2.c$123$2$135 ==.
                                   2589 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:123: if(h_count >= 3){
      0005D2 C3               [12] 2590 	clr	c
      0005D3 E5*14            [12] 2591 	mov	a,_h_count
      0005D5 94 03            [12] 2592 	subb	a,#0x03
      0005D7 E5*15            [12] 2593 	mov	a,(_h_count + 1)
      0005D9 94 00            [12] 2594 	subb	a,#0x00
      0005DB 40 08            [24] 2595 	jc	00102$
                           0005DD  2596 	C$lab3_2.c$124$3$136 ==.
                                   2597 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:124: new_heading = 1;
      0005DD 75*16 01         [24] 2598 	mov	_new_heading,#0x01
                           0005E0  2599 	C$lab3_2.c$125$3$136 ==.
                                   2600 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:125: h_count = 0;
      0005E0 E4               [12] 2601 	clr	a
      0005E1 F5*14            [12] 2602 	mov	_h_count,a
      0005E3 F5*15            [12] 2603 	mov	(_h_count + 1),a
      0005E5                       2604 00102$:
                           0005E5  2605 	C$lab3_2.c$127$2$135 ==.
                                   2606 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:127: if(r_count >= 4){
      0005E5 C3               [12] 2607 	clr	c
      0005E6 E5*1B            [12] 2608 	mov	a,_r_count
      0005E8 94 04            [12] 2609 	subb	a,#0x04
      0005EA E5*1C            [12] 2610 	mov	a,(_r_count + 1)
      0005EC 94 00            [12] 2611 	subb	a,#0x00
      0005EE 40 0A            [24] 2612 	jc	00104$
                           0005F0  2613 	C$lab3_2.c$128$3$137 ==.
                                   2614 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:128: new_range = 1;
      0005F0 75*1D 01         [24] 2615 	mov	_new_range,#0x01
                           0005F3  2616 	C$lab3_2.c$129$3$137 ==.
                                   2617 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:129: r_count = 0;
      0005F3 E4               [12] 2618 	clr	a
      0005F4 F5*1E            [12] 2619 	mov	(_new_range + 1),a
      0005F6 F5*1B            [12] 2620 	mov	_r_count,a
      0005F8 F5*1C            [12] 2621 	mov	(_r_count + 1),a
      0005FA                       2622 00104$:
                           0005FA  2623 	C$lab3_2.c$131$2$135 ==.
                                   2624 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:131: PCA0 = 28614;
      0005FA 75 E9 C6         [24] 2625 	mov	((_PCA0 >> 0) & 0xFF),#0xc6
      0005FD 75 F9 6F         [24] 2626 	mov	((_PCA0 >> 8) & 0xFF),#0x6f
      000600                       2627 00106$:
                           000600  2628 	C$lab3_2.c$133$1$134 ==.
                                   2629 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:133: Counts++;
      000600 05*2A            [12] 2630 	inc	_Counts
      000602 E4               [12] 2631 	clr	a
      000603 B5*2A 02         [24] 2632 	cjne	a,_Counts,00123$
      000606 05*2B            [12] 2633 	inc	(_Counts + 1)
      000608                       2634 00123$:
                           000608  2635 	C$lab3_2.c$134$1$134 ==.
                                   2636 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:134: PCA0CN &= 0xC0; //Handle other PCA interrupt sources
      000608 53 D8 C0         [24] 2637 	anl	_PCA0CN,#0xc0
      00060B D0 D0            [24] 2638 	pop	psw
      00060D D0 E0            [24] 2639 	pop	acc
                           00060F  2640 	C$lab3_2.c$135$1$134 ==.
                           00060F  2641 	XG$PCA_ISR$0$0 ==.
      00060F 32               [24] 2642 	reti
                                   2643 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2644 ;	eliminated unneeded push/pop dpl
                                   2645 ;	eliminated unneeded push/pop dph
                                   2646 ;	eliminated unneeded push/pop b
                                   2647 ;------------------------------------------------------------
                                   2648 ;Allocation info for local variables in function 'startPing'
                                   2649 ;------------------------------------------------------------
                           000610  2650 	G$startPing$0$0 ==.
                           000610  2651 	C$lab3_2.c$137$1$134 ==.
                                   2652 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:137: void startPing(void){
                                   2653 ;	-----------------------------------------
                                   2654 ;	 function startPing
                                   2655 ;	-----------------------------------------
      000610                       2656 _startPing:
                           000610  2657 	C$lab3_2.c$138$1$139 ==.
                                   2658 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:138: Data[0] = 0x51;
      000610 75*28 51         [24] 2659 	mov	_Data,#0x51
                           000613  2660 	C$lab3_2.c$139$1$139 ==.
                                   2661 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:139: addr = 0xE0;
      000613 75*27 E0         [24] 2662 	mov	_addr,#0xe0
                           000616  2663 	C$lab3_2.c$140$1$139 ==.
                                   2664 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:140: i2c_write_data(addr, 0, Data, 1);
      000616 75*0Br28         [24] 2665 	mov	_i2c_write_data_PARM_3,#_Data
      000619 75*0C 00         [24] 2666 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00061C 75*0D 40         [24] 2667 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00061F 75*0A 00         [24] 2668 	mov	_i2c_write_data_PARM_2,#0x00
      000622 75*0E 01         [24] 2669 	mov	_i2c_write_data_PARM_4,#0x01
      000625 75 82 E0         [24] 2670 	mov	dpl,#0xe0
      000628 12r03r88         [24] 2671 	lcall	_i2c_write_data
                           00062B  2672 	C$lab3_2.c$141$1$139 ==.
                           00062B  2673 	XG$startPing$0$0 ==.
      00062B 22               [24] 2674 	ret
                                   2675 ;------------------------------------------------------------
                                   2676 ;Allocation info for local variables in function 'wait'
                                   2677 ;------------------------------------------------------------
                           00062C  2678 	G$wait$0$0 ==.
                           00062C  2679 	C$lab3_2.c$143$1$139 ==.
                                   2680 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:143: void wait(void){
                                   2681 ;	-----------------------------------------
                                   2682 ;	 function wait
                                   2683 ;	-----------------------------------------
      00062C                       2684 _wait:
                           00062C  2685 	C$lab3_2.c$144$1$141 ==.
                                   2686 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:144: Counts = 0;
      00062C E4               [12] 2687 	clr	a
      00062D F5*2A            [12] 2688 	mov	_Counts,a
      00062F F5*2B            [12] 2689 	mov	(_Counts + 1),a
                           000631  2690 	C$lab3_2.c$145$1$141 ==.
                                   2691 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:145: PCA0CP2 = 0xFFFF - PW_CENTER;
      000631 14               [12] 2692 	dec	a
      000632 C3               [12] 2693 	clr	c
      000633 95*23            [12] 2694 	subb	a,_PW_CENTER
      000635 F5 EC            [12] 2695 	mov	((_PCA0CP2 >> 0) & 0xFF),a
      000637 74 FF            [12] 2696 	mov	a,#0xff
      000639 95*24            [12] 2697 	subb	a,(_PW_CENTER + 1)
      00063B F5 FC            [12] 2698 	mov	((_PCA0CP2 >> 8) & 0xFF),a
                           00063D  2699 	C$lab3_2.c$146$1$141 ==.
                                   2700 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:146: while(Counts*65536 < 1843200); 		//wait 1 sec
      00063D                       2701 00101$:
      00063D AC*2A            [24] 2702 	mov	r4,_Counts
      00063F E5*2B            [12] 2703 	mov	a,(_Counts + 1)
      000641 FD               [12] 2704 	mov	r5,a
      000642 33               [12] 2705 	rlc	a
      000643 95 E0            [12] 2706 	subb	a,acc
      000645 8D 07            [24] 2707 	mov	ar7,r5
      000647 8C 06            [24] 2708 	mov	ar6,r4
      000649 7D 00            [12] 2709 	mov	r5,#0x00
      00064B 7C 00            [12] 2710 	mov	r4,#0x00
      00064D C3               [12] 2711 	clr	c
      00064E ED               [12] 2712 	mov	a,r5
      00064F 94 20            [12] 2713 	subb	a,#0x20
      000651 EE               [12] 2714 	mov	a,r6
      000652 94 1C            [12] 2715 	subb	a,#0x1c
      000654 EF               [12] 2716 	mov	a,r7
      000655 64 80            [12] 2717 	xrl	a,#0x80
      000657 94 80            [12] 2718 	subb	a,#0x80
      000659 40 E2            [24] 2719 	jc	00101$
                           00065B  2720 	C$lab3_2.c$147$1$141 ==.
                           00065B  2721 	XG$wait$0$0 ==.
      00065B 22               [24] 2722 	ret
                                   2723 ;------------------------------------------------------------
                                   2724 ;Allocation info for local variables in function 'ReadCompass'
                                   2725 ;------------------------------------------------------------
                           00065C  2726 	G$ReadCompass$0$0 ==.
                           00065C  2727 	C$lab3_2.c$149$1$141 ==.
                                   2728 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:149: unsigned int ReadCompass(){
                                   2729 ;	-----------------------------------------
                                   2730 ;	 function ReadCompass
                                   2731 ;	-----------------------------------------
      00065C                       2732 _ReadCompass:
                           00065C  2733 	C$lab3_2.c$150$1$142 ==.
                                   2734 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:150: addr = 0xC0; // the address of the sensor, 0xC0 for the compass
      00065C 75*27 C0         [24] 2735 	mov	_addr,#0xc0
                           00065F  2736 	C$lab3_2.c$151$1$142 ==.
                                   2737 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:151: heading_ = 0;
      00065F E4               [12] 2738 	clr	a
      000660 F5*19            [12] 2739 	mov	_heading_,a
      000662 F5*1A            [12] 2740 	mov	(_heading_ + 1),a
                           000664  2741 	C$lab3_2.c$152$1$142 ==.
                                   2742 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:152: i2c_read_data(addr, 2, Data, 2);  // read two byte, starting at reg 2
      000664 75*10r28         [24] 2743 	mov	_i2c_read_data_PARM_3,#_Data
                                   2744 ;	1-genFromRTrack replaced	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000667 F5*11            [12] 2745 	mov	(_i2c_read_data_PARM_3 + 1),a
      000669 75*12 40         [24] 2746 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00066C 75*0F 02         [24] 2747 	mov	_i2c_read_data_PARM_2,#0x02
      00066F 75*13 02         [24] 2748 	mov	_i2c_read_data_PARM_4,#0x02
      000672 75 82 C0         [24] 2749 	mov	dpl,#0xc0
      000675 12r03rFE         [24] 2750 	lcall	_i2c_read_data
                           000678  2751 	C$lab3_2.c$153$1$142 ==.
                                   2752 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:153: heading_ =(((unsigned int)Data[0] << 8) | Data[1]);  //combine the two values
      000678 AF*28            [24] 2753 	mov	r7,_Data
      00067A 7E 00            [12] 2754 	mov	r6,#0x00
      00067C AC*29            [24] 2755 	mov	r4,(_Data + 0x0001)
      00067E 7D 00            [12] 2756 	mov	r5,#0x00
      000680 EC               [12] 2757 	mov	a,r4
      000681 4E               [12] 2758 	orl	a,r6
      000682 F5*19            [12] 2759 	mov	_heading_,a
      000684 ED               [12] 2760 	mov	a,r5
      000685 4F               [12] 2761 	orl	a,r7
      000686 F5*1A            [12] 2762 	mov	(_heading_ + 1),a
                           000688  2763 	C$lab3_2.c$154$1$142 ==.
                                   2764 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:154: return heading_;             // the heading returned in degrees between 0 and 359
      000688 85*19 82         [24] 2765 	mov	dpl,_heading_
      00068B 85*1A 83         [24] 2766 	mov	dph,(_heading_ + 1)
                           00068E  2767 	C$lab3_2.c$155$1$142 ==.
                           00068E  2768 	XG$ReadCompass$0$0 ==.
      00068E 22               [24] 2769 	ret
                                   2770 ;------------------------------------------------------------
                                   2771 ;Allocation info for local variables in function 'ReadRanger'
                                   2772 ;------------------------------------------------------------
                                   2773 ;Data                      Allocated with name '_ReadRanger_Data_1_143'
                                   2774 ;range                     Allocated to registers 
                                   2775 ;addr                      Allocated to registers 
                                   2776 ;------------------------------------------------------------
                           00068F  2777 	G$ReadRanger$0$0 ==.
                           00068F  2778 	C$lab3_2.c$157$1$142 ==.
                                   2779 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:157: unsigned int ReadRanger(){
                                   2780 ;	-----------------------------------------
                                   2781 ;	 function ReadRanger
                                   2782 ;	-----------------------------------------
      00068F                       2783 _ReadRanger:
                           00068F  2784 	C$lab3_2.c$161$1$143 ==.
                                   2785 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:161: i2c_read_data(addr, 2, Data, 2); // read two bytes, starting at reg 2
      00068F 75*10r2C         [24] 2786 	mov	_i2c_read_data_PARM_3,#_ReadRanger_Data_1_143
      000692 75*11 00         [24] 2787 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000695 75*12 40         [24] 2788 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000698 75*0F 02         [24] 2789 	mov	_i2c_read_data_PARM_2,#0x02
      00069B 75*13 02         [24] 2790 	mov	_i2c_read_data_PARM_4,#0x02
      00069E 75 82 E0         [24] 2791 	mov	dpl,#0xe0
      0006A1 12r03rFE         [24] 2792 	lcall	_i2c_read_data
                           0006A4  2793 	C$lab3_2.c$162$1$143 ==.
                                   2794 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:162: range = (((unsigned int)Data[0] << 8) | Data[1]);
      0006A4 AF*2C            [24] 2795 	mov	r7,_ReadRanger_Data_1_143
      0006A6 7E 00            [12] 2796 	mov	r6,#0x00
      0006A8 AC*2D            [24] 2797 	mov	r4,(_ReadRanger_Data_1_143 + 0x0001)
      0006AA 7D 00            [12] 2798 	mov	r5,#0x00
      0006AC EC               [12] 2799 	mov	a,r4
      0006AD 4E               [12] 2800 	orl	a,r6
      0006AE F5 82            [12] 2801 	mov	dpl,a
      0006B0 ED               [12] 2802 	mov	a,r5
      0006B1 4F               [12] 2803 	orl	a,r7
      0006B2 F5 83            [12] 2804 	mov	dph,a
                           0006B4  2805 	C$lab3_2.c$163$1$143 ==.
                                   2806 ;	C:\Users\doylem5\Dropbox\litec\litec_2\lab3\lab3-2\lab3-2.c:163: return range;
                           0006B4  2807 	C$lab3_2.c$164$1$143 ==.
                           0006B4  2808 	XG$ReadRanger$0$0 ==.
      0006B4 22               [24] 2809 	ret
                                   2810 	.area CSEG    (CODE)
                                   2811 	.area CONST   (CODE)
                           000000  2812 Flab3_2$__str_0$0$0 == .
      000000                       2813 ___str_0:
      000000 0A                    2814 	.db 0x0a
      000001 54 79 70 65 20 64 69  2815 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    2816 	.db 0x00
                           000016  2817 Flab3_2$__str_1$0$0 == .
      000016                       2818 ___str_1:
      000016 20 20 20 20 20 25 63  2819 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    2820 	.db 0x00
                           000026  2821 Flab3_2$__str_2$0$0 == .
      000026                       2822 ___str_2:
      000026 25 63                 2823 	.ascii "%c"
      000028 00                    2824 	.db 0x00
                           000029  2825 Flab3_2$__str_3$0$0 == .
      000029                       2826 ___str_3:
      000029 0D                    2827 	.db 0x0d
      00002A 45 6D 62 65 64 64 65  2828 	.ascii "Embedded Control Steering Calibration"
             64 20 43 6F 6E 74 72
             6F 6C 20 53 74 65 65
             72 69 6E 67 20 43 61
             6C 69 62 72 61 74 69
             6F 6E
      00004F 0A                    2829 	.db 0x0a
      000050 00                    2830 	.db 0x00
                           000051  2831 Flab3_2$__str_4$0$0 == .
      000051                       2832 ___str_4:
      000051 0D                    2833 	.db 0x0d
      000052 48 65 61 64 69 6E 67  2834 	.ascii "Heading: %d"
             3A 20 25 64
      00005D 0A                    2835 	.db 0x0a
      00005E 00                    2836 	.db 0x00
                           00005F  2837 Flab3_2$__str_5$0$0 == .
      00005F                       2838 ___str_5:
      00005F 0D                    2839 	.db 0x0d
      000060 52 61 6E 67 65 3A 20  2840 	.ascii "Range: %d"
             25 64
      000069 0A                    2841 	.db 0x0a
      00006A 00                    2842 	.db 0x00
                                   2843 	.area XINIT   (CODE)
                                   2844 	.area CABS    (ABS,CODE)
